<?xml version="1.0" encoding="UTF-8"?><testrun name="JUnitTestSuitePart3" project="OGP1415-JumpingAlien" tests="346" started="346" failures="2" errors="7" ignored="0">
  <testsuite name="jumpingalien.part3.tests.JUnitTestSuitePart3" time="0.905">
    <testsuite name="jumpingalien.part2.tests.PartialFacadeTest" time="0.021">
      <testcase name="testZeroAccellerationOnGround" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.0"/>
      <testcase name="testWalkAnimationLastFrame" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.002"/>
      <testcase name="testGetBottomLeftPixelOfRandomTile" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.0"/>
      <testcase name="startMoveRightMaxSpeedAtRightTime" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.018"/>
      <testcase name="startMoveRightCorrect" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.001"/>
      <testcase name="testTilesInRegion" classname="jumpingalien.part2.tests.PartialFacadeTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.MazubTest" time="0.295">
      <testcase name="testOnTopOfSharks" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="testOnTopOfSlimes" classname="jumpingalien.part2.tests.MazubTest" time="0.002"/>
      <testcase name="illegalNegativeDt" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="didPlayerWin" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testEndDuck" classname="jumpingalien.part2.tests.MazubTest" time="0.027"/>
      <testcase name="testEndJump" classname="jumpingalien.part2.tests.MazubTest" time="0.002"/>
      <testcase name="testFallAcceleration" classname="jumpingalien.part2.tests.MazubTest" time="0.004"/>
      <testcase name="otherInitStartSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="illegalInitStartSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="createMazubNotValidSprite" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testJumpWhileJumping" classname="jumpingalien.part2.tests.MazubTest" time="0.003"/>
      <testcase name="testSpeedWhenJumping" classname="jumpingalien.part2.tests.MazubTest" time="0.006"/>
      <testcase name="createMazubNotValidPosition2" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="createMazubTestFacade" classname="jumpingalien.part2.tests.MazubTest" time="0.005"/>
      <testcase name="createMazubNotValidPosition" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testSolidFeatureWallRight" classname="jumpingalien.part2.tests.MazubTest" time="0.002"/>
      <testcase name="testVelocityJumpHighestPoint" classname="jumpingalien.part2.tests.MazubTest" time="0.004"/>
      <testcase name="MaxSpeedAfterDucking" classname="jumpingalien.part2.tests.MazubTest" time="0.006"/>
      <testcase name="testAccelerationJump" classname="jumpingalien.part2.tests.MazubTest" time="0.004"/>
      <testcase name="testBoundaryGround2" classname="jumpingalien.part2.tests.MazubTest" time="0.011"/>
      <testcase name="testLongInMagma" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testLongInWater" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="illegalMaxSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testSolidFeatureWallLeft" classname="jumpingalien.part2.tests.MazubTest" time="0.003"/>
      <testcase name="illegalPosition" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="testShortInMagma" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testShortInWater" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="JumpAndEndJump" classname="jumpingalien.part2.tests.MazubTest" time="0.006"/>
      <testcase name="testImmunity" classname="jumpingalien.part2.tests.MazubTest" time="0.151"/>
      <testcase name="illegalSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="illegalbigDt" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testSpeedWhenJumpingAndDucking" classname="jumpingalien.part2.tests.MazubTest" time="0.01"/>
      <testcase name="startMoveLeftCorrect" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="moveLeftNotRight" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="testAccellerationZeroWhenNotMoving" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testDuckSpriteNotMoving" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testVelocityDucking2" classname="jumpingalien.part2.tests.MazubTest" time="0.003"/>
      <testcase name="illegalSprite" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testStartDuckAndDuckJump" classname="jumpingalien.part2.tests.MazubTest" time="0.007"/>
      <testcase name="testEndFallLocation" classname="jumpingalien.part2.tests.MazubTest" time="0.007"/>
      <testcase name="moveRightNotLeft" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="illegalPosition2" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="testCollidingPlants" classname="jumpingalien.part2.tests.MazubTest" time="0.004"/>
      <testcase name="createMazubNotValidSprite2" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="createMazubNotValidInitMaxSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="startMoveLeftMaxSpeedAtRightTime" classname="jumpingalien.part2.tests.MazubTest" time="0.005"/>
      <testcase name="testCollidingSharks" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testCollidingSlimes" classname="jumpingalien.part2.tests.MazubTest" time="0.001"/>
      <testcase name="testVelocityDucking" classname="jumpingalien.part2.tests.MazubTest" time="0.005"/>
      <testcase name="createMazubOtherInitMaxSpeed" classname="jumpingalien.part2.tests.MazubTest" time="0.0"/>
      <testcase name="testEndMoveRight" classname="jumpingalien.part2.tests.MazubTest" time="0.003"/>
      <testcase name="testBoundaryGround" classname="jumpingalien.part2.tests.MazubTest" time="0.004"/>
      <testcase name="testEndMoveLeft" classname="jumpingalien.part2.tests.MazubTest" time="0.003"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.PartialFacadeTest" time="0.121">
      <testcase name="testParseSimplestProgram" classname="jumpingalien.part3.tests.PartialFacadeTest" time="0.103"/>
      <testcase name="testParseFails" classname="jumpingalien.part3.tests.PartialFacadeTest" time="0.003"/>
      <testcase name="testWellformed" classname="jumpingalien.part3.tests.PartialFacadeTest" time="0.015"/>
      <testcase name="testBreakNotWellformed" classname="jumpingalien.part3.tests.PartialFacadeTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.PlantTest" time="0.011">
      <testcase name="testDie" classname="jumpingalien.part2.tests.PlantTest" time="0.001"/>
      <testcase name="testFacadeGetPlants" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testAdvanceTimeCorrect" classname="jumpingalien.part2.tests.PlantTest" time="0.004"/>
      <testcase name="testSpriteTooLong" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testNotWithinBoundaries" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testCorrectSpeed" classname="jumpingalien.part2.tests.PlantTest" time="0.001"/>
      <testcase name="testSpriteTooShort" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testTooBigPosition" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testPlantFacadeInvalidSprite" classname="jumpingalien.part2.tests.PlantTest" time="0.0"/>
      <testcase name="testRemove" classname="jumpingalien.part2.tests.PlantTest" time="0.001"/>
      <testcase name="testPlantFacadeInvalidPos" classname="jumpingalien.part2.tests.PlantTest" time="0.001"/>
      <testcase name="testChangeOrientation" classname="jumpingalien.part2.tests.PlantTest" time="0.003"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.SchoolTest" time="0.002">
      <testcase name="testLoseHitpoints" classname="jumpingalien.part2.tests.SchoolTest" time="0.001"/>
      <testcase name="testEquallyLargeSchools" classname="jumpingalien.part2.tests.SchoolTest" time="0.0"/>
      <testcase name="testJoinSchool" classname="jumpingalien.part2.tests.SchoolTest" time="0.001"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.SharkTest" time="0.008">
      <testcase name="testDie" classname="jumpingalien.part2.tests.SharkTest" time="0.001"/>
      <testcase name="testLoseHitpoints" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testSpriteTooLong" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testLongInMagma" classname="jumpingalien.part2.tests.SharkTest" time="0.001"/>
      <testcase name="testSpriteTooShort" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testShortInMagma" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testIsImmune" classname="jumpingalien.part2.tests.SharkTest" time="0.002"/>
      <testcase name="testLongInAir" classname="jumpingalien.part2.tests.SharkTest" time="0.003"/>
      <testcase name="testShortInAir" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testSharkFacadeInvalidPos" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testSharkFacadeInvalidSprite" classname="jumpingalien.part2.tests.SharkTest" time="0.001"/>
      <testcase name="testNegativePosition" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testTooBigPosition" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
      <testcase name="testRemoveAfterDeath" classname="jumpingalien.part2.tests.SharkTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.SlimeTest" time="0.022">
      <testcase name="testDie" classname="jumpingalien.part2.tests.SlimeTest" time="0.001"/>
      <testcase name="testFacadeGetSlimes" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testLoseHitpoints" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testSpriteTooLong" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testFacadeInvalidSchool" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testFacadeInvalidSprite" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testDieInWater" classname="jumpingalien.part2.tests.SlimeTest" time="0.002"/>
      <testcase name="testLongInMagma" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testLongInWater" classname="jumpingalien.part2.tests.SlimeTest" time="0.001"/>
      <testcase name="testSpriteTooShort" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testShortInMagma" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testShortInWater" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testIsImmune" classname="jumpingalien.part2.tests.SlimeTest" time="0.001"/>
      <testcase name="testFacadeInvalidPos" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testNegativePosition" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testTooBigPosition" classname="jumpingalien.part2.tests.SlimeTest" time="0.001"/>
      <testcase name="testNullSchool" classname="jumpingalien.part2.tests.SlimeTest" time="0.0"/>
      <testcase name="testRemoveAfterDeath" classname="jumpingalien.part2.tests.SlimeTest" time="0.015"/>
    </testsuite>
    <testsuite name="jumpingalien.part2.tests.WorldTest" time="0.013">
      <testcase name="illegalSetGeologicalFeatureTileX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="illegalSetGeologicalFeatureTileY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowZeroX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowZeroY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="illegalSetGeologicalFeatureTileType" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGetAlien" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalTargetTileXGreaterThanNbTilesX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalTargetTileXGreaterThanNbTilesY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowNegativeX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowNegativeY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="illegalSetGeologicalFeaturWrongXTile" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="illegalSetGeologicalFeaturWrongYTile" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGetVisibleWindow" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testSetGeologicalFeature" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testRemoveAlien" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testRemovePlant" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testRemoveShark" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testRemoveSlime" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetTilePositionsIn" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testAddPlant" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testAddShark" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testAddSlime" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGeologicalFeaturePixelException" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetWorldInPixels" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testStartGameSetTile" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGetBottomLeftPixelOfTile" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testAdvanceTimeIllegalDtNegative" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testStartGameSetAlien" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalTargetTileYNegative" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGetTileLenght" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowTooBigX" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalVisibleWindowTooBigY" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGeologicalFeatureCorrect" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="illegalAmountOfPlants" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="illegalAmountOfSlimes" classname="jumpingalien.part2.tests.WorldTest" time="0.002"/>
      <testcase name="illegalAmountOfCharacters" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalTileSize" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetPlants" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testGetSharks" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testGetSlimes" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIsGameOver1" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testIsGameOver2" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testAdvanceTimeIllegalDtTooBig" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testStartGameAddPlant" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
      <testcase name="testStartGameAddShark" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testStartGameAddSlime" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalNbOfTilesZero" classname="jumpingalien.part2.tests.WorldTest" time="0.0"/>
      <testcase name="testIllegalNbOfTilesNegative" classname="jumpingalien.part2.tests.WorldTest" time="0.001"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.BuzamTest" time="0.014">
      <testcase name="constructBadPosBuzam" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="testAddBuzamIllegalPos" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="TestFacadeGetSize" classname="jumpingalien.part3.tests.BuzamTest" time="0.001"/>
      <testcase name="TestFacade" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="TestColliding" classname="jumpingalien.part3.tests.BuzamTest" time="0.004"/>
      <testcase name="TestFacadeIllegalAddBuzam2" classname="jumpingalien.part3.tests.BuzamTest" time="0.001"/>
      <testcase name="ProgramMoveRight" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="TestIllegalDt" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="constructBadSpriteBuzam" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="TestFacadeIllegalAddBuzam" classname="jumpingalien.part3.tests.BuzamTest" time="0.001"/>
      <testcase name="TestDeath" classname="jumpingalien.part3.tests.BuzamTest" time="0.006"/>
      <testcase name="constructBuzamTest" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="TestStartMoveLeftCorrect" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
      <testcase name="testStartGameAddBuzam" classname="jumpingalien.part3.tests.BuzamTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.StatementTest" time="0.077">
      <testcase name="whileTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="IfElseStatementTest" classname="jumpingalien.part3.tests.StatementTest" time="0.003"/>
      <testcase name="BreakStatementNotWellFormedTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="StartDuckTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="IfStatementNoElseTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="StartRunTestRight" classname="jumpingalien.part3.tests.StatementTest" time="0.002"/>
      <testcase name="SkipStatementNotWellFormedTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StopRunTestRight" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="SequenceOfStatementsTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="breakStatementTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="IfStatementTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StartDuckNotInstanceOfMazubTest" classname="jumpingalien.part3.tests.StatementTest" time="0.005">
        <error>java.lang.IllegalArgumentException&#13;
	at jumpingalien.model.program.statement.StartDuck.execute(StartDuck.java:19)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:85)&#13;
	at jumpingalien.part3.tests.StatementTest.StartDuckNotInstanceOfMazubTest(StatementTest.java:203)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="StartRunTestLeft" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StartJumpTestInstanceOfMazub" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StartJumpTestInstanceOfShark" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="whileStatementTest" classname="jumpingalien.part3.tests.StatementTest" time="0.003"/>
      <testcase name="InvalidStartJumpTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001">
        <error>java.lang.IllegalArgumentException&#13;
	at jumpingalien.model.program.statement.StartJump.execute(StartJump.java:22)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:85)&#13;
	at jumpingalien.part3.tests.StatementTest.InvalidStartJumpTest(StatementTest.java:89)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="forEachTest" classname="jumpingalien.part3.tests.StatementTest" time="0.053">
        <error>java.lang.IllegalArgumentException&#13;
	at jumpingalien.model.program.statement.StartJump.execute(StartJump.java:22)&#13;
	at jumpingalien.model.program.statement.SequenceOfStatements.execute(SequenceOfStatements.java:36)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:82)&#13;
	at jumpingalien.part3.tests.StatementTest.forEachTest(StatementTest.java:378)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="StopRunTestLeft" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="WaitTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="StopJumpTestInstanceOfMazub" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StopJumpTestInstanceOfShark" classname="jumpingalien.part3.tests.StatementTest" time="0.001"/>
      <testcase name="StopDuckTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="SkipStatementTest" classname="jumpingalien.part3.tests.StatementTest" time="0.0"/>
      <testcase name="StopDuckNotInstanceOfMazubTest" classname="jumpingalien.part3.tests.StatementTest" time="0.001">
        <error>java.lang.IllegalArgumentException&#13;
	at jumpingalien.model.program.statement.StopDuck.execute(StopDuck.java:18)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:85)&#13;
	at jumpingalien.part3.tests.StatementTest.StopDuckNotInstanceOfMazubTest(StatementTest.java:213)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="StopJumpTestNoInstanceOfShark" classname="jumpingalien.part3.tests.StatementTest" time="0.001">
        <error>java.lang.IllegalArgumentException&#13;
	at jumpingalien.model.program.statement.StopJump.execute(StopJump.java:22)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:82)&#13;
	at jumpingalien.part3.tests.StatementTest.StopJumpTestNoInstanceOfShark(StatementTest.java:123)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.UnaryExpressionTest" time="0.012">
      <testcase name="testSearchObjectDown" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testSearchObjectLeft" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testIsNotDead" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testNotBool2" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="isTerrain" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsSharkJumping" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testReadVariable" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsMovingUp" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testBoolFalse" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testBoolTrue" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIllegalReadVariable" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testHeightObject" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsAir" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testSqrtDouble" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsJumping" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testGetX" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testGetY" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testDirectionExpression" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testSearchObjectRight" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsMovingRight" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsSlimeFalse" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="expressionsWithProgramTest1" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.002"/>
      <testcase name="expressionsWithProgramTest2" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.003">
        <error>java.lang.ClassCastException: jumpingalien.model.Buzam cannot be cast to jumpingalien.model.Tile&#13;
	at jumpingalien.model.program.expression.IsPassable.evaluate(IsPassable.java:19)&#13;
	at jumpingalien.model.program.expression.IsPassable.evaluate(IsPassable.java:1)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:19)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:1)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:19)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:1)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:19)&#13;
	at jumpingalien.model.program.expression.OrBool.evaluate(OrBool.java:1)&#13;
	at jumpingalien.model.program.statement.IfStatement.execute(IfStatement.java:58)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:85)&#13;
	at jumpingalien.part3.tests.UnaryExpressionTest.expressionsWithProgramTest2(UnaryExpressionTest.java:663)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="testIsPassable" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testRandomDouble" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testConstant" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="isNoTerrain" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testObjectNull" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testObjectSelf" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testGetHpObject" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testSearchObjectUp" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testWidthObject" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsMazubFalse" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsMovingLeft" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsMagma" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testIsMazub" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsPlant" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsShark" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsSlime" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsWater" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testNotBool" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsBuzamJumping" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.001"/>
      <testcase name="testSqrtDouble2" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
      <testcase name="testIsDucking" classname="jumpingalien.part3.tests.UnaryExpressionTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.BinaryExpressionTest" time="0.009">
      <testcase name="testException" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testEquals2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testEquals3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.001"/>
      <testcase name="testEquals4" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0">
        <failure>java.lang.AssertionError&#13;
	at org.junit.Assert.fail(Assert.java:86)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertFalse(Assert.java:64)&#13;
	at org.junit.Assert.assertFalse(Assert.java:74)&#13;
	at jumpingalien.part3.tests.BinaryExpressionTest.testEquals4(BinaryExpressionTest.java:208)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testOrBool1" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testOrBool2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testOrBool3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testLessThan" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.001"/>
      <testcase name="testGreaterEquals2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testGreaterEquals3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testMultiplication2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testDivision2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testMultiplication" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testAddition" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testGreaterThan2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.001"/>
      <testcase name="testAndBool1" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testAndBool2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testAndBool3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testGreaterThan" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testNotEquals2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testNotEquals3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.001"/>
      <testcase name="testNotEquals4" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0">
        <failure>java.lang.AssertionError&#13;
	at org.junit.Assert.fail(Assert.java:86)&#13;
	at org.junit.Assert.assertTrue(Assert.java:41)&#13;
	at org.junit.Assert.assertTrue(Assert.java:52)&#13;
	at jumpingalien.part3.tests.BinaryExpressionTest.testNotEquals4(BinaryExpressionTest.java:256)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</failure>
      </testcase>
      <testcase name="testLessThan2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testDivision" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testLessEquals" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testAddition2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testAddition3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.001"/>
      <testcase name="testEquals" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testLessEquals2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testLessEquals3" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testGreaterEquals" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="expressionsWithProgramTest" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.004"/>
      <testcase name="testNotEquals" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testSubtraction2" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
      <testcase name="testSubtraction" classname="jumpingalien.part3.tests.BinaryExpressionTest" time="0.0"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.ProgramTest" time="0.011">
      <testcase name="testBadformedBreak" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="PlantWithProgramIllegalPos" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="PlantWithProgramIllegalSprite" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedBreakForEach" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="testWellformedActionStatementSkip" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedActionStatementWait" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="testWellformedActionStatement2" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedActionStatement3" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="testWellformedActionStatement4" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedActionStatement5" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="testWellformedActionStatement6" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedActionStatement7" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="runProgramFromAdvanceTime" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedActionStatement" classname="jumpingalien.part3.tests.ProgramTest" time="0.0"/>
      <testcase name="testWellformedBreakWhile" classname="jumpingalien.part3.tests.ProgramTest" time="0.001"/>
      <testcase name="StopRunning" classname="jumpingalien.part3.tests.ProgramTest" time="0.001">
        <error>java.lang.ClassCastException: jumpingalien.model.Tile cannot be cast to jumpingalien.model.GameObject&#13;
	at jumpingalien.model.program.expression.GetHpObject.evaluate(GetHpObject.java:19)&#13;
	at jumpingalien.model.program.expression.GetHpObject.evaluate(GetHpObject.java:1)&#13;
	at jumpingalien.model.program.statement.Assignment.execute(Assignment.java:35)&#13;
	at jumpingalien.model.program.statement.SequenceOfStatements.execute(SequenceOfStatements.java:36)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:85)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:86)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:86)&#13;
	at jumpingalien.model.program.Program.execute(Program.java:86)&#13;
	at jumpingalien.part3.tests.ProgramTest.StopRunning(ProgramTest.java:130)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)&#13;
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)&#13;
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)&#13;
	at java.lang.reflect.Method.invoke(Unknown Source)&#13;
	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)&#13;
	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)&#13;
	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)&#13;
	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)&#13;
	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)&#13;
	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:127)&#13;
	at org.junit.runners.Suite.runChild(Suite.java:26)&#13;
	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)&#13;
	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)&#13;
	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)&#13;
	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)&#13;
	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)&#13;
	at org.junit.runners.ParentRunner.run(ParentRunner.java:309)&#13;
	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)&#13;
	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:675)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)&#13;
	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)&#13;
&#13;
</error>
      </testcase>
      <testcase name="runProgramWhithSmallDt" classname="jumpingalien.part3.tests.ProgramTest" time="0.003"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.TypeCheckingTest" time="0.286">
      <testcase name="waitStatement" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="isTerrain" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isMovingBadObject" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="illegalAddition" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="stopRun" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="isJumping" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isDead" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="illegalAndBool" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="illegalSubtraction" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="orBool" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="randomDouble" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="getHeightObject" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="sqrtDouble" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="greaterEquals" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="forEachIllegalSort" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="illegalDivision" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="illegalMultiplication" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="assignVariable" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.0"/>
      <testcase name="getTileExpr" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="searchObject" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="getX" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="getY" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isAir" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="illegalNotEquals" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="illegalEquals" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isPassable" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="greaterThan" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="whileStatement" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.0"/>
      <testcase name="getWidthObject" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="startRun" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="forEachIllegalWhere" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isDucking" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.0"/>
      <testcase name="getHpObject" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="ifStatement" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isMovingBadDirection" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.238"/>
      <testcase name="lessEquals" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="isMagma" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isMazub" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isPlant" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isShark" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="isSlime" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.002"/>
      <testcase name="isWater" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.0"/>
      <testcase name="lessThan" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
      <testcase name="notBool" classname="jumpingalien.part3.tests.TypeCheckingTest" time="0.001"/>
    </testsuite>
    <testsuite name="jumpingalien.part3.tests.TileTest" time="0.002">
      <testcase name="testXDim" classname="jumpingalien.part3.tests.TileTest" time="0.0"/>
      <testcase name="testXPos" classname="jumpingalien.part3.tests.TileTest" time="0.0"/>
      <testcase name="testYDim" classname="jumpingalien.part3.tests.TileTest" time="0.001"/>
      <testcase name="testYPos" classname="jumpingalien.part3.tests.TileTest" time="0.0"/>
      <testcase name="testGetGeologicalFeature" classname="jumpingalien.part3.tests.TileTest" time="0.0"/>
      <testcase name="testGetGeologicalFeatureException" classname="jumpingalien.part3.tests.TileTest" time="0.001"/>
    </testsuite>
  </testsuite>
</testrun>
