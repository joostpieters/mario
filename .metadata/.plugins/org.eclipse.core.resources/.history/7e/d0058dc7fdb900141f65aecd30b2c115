/**
 * A class that describes the movement of the rectangular player
 * character Mazub in a game world. 
 * 
 * @invar The lowest left corner (x_pos,y_pos) has to stay
 * 			in the game world.
 * 		| isValidPosition(getXPos(), getYPos())
 * @invar The speed has to be limited to a maximum speed
 * 		| isValidSpeed(getSpeed())
 * @author Pieter Van den Berghe, Ward Romanus
 */
public class Mazub {
	
	/**
	 * @param x_pos
	 * The x position in the field for the new Mazub
	 * @param y_pos
	 * The y position in the field for the new Mazub
	 * @param x_dim
	 * Number of pixels from the x dimension of the new Mazub
	 * @param y_dim
	 * Number of pixels from the y dimension of the new Mazub
	 * @post
	 * 
	 * DEFENSIEF uitwerken (denk ik)
	 */
	public Mazub(int x_pos, int y_pos, int x_dim, int y_dim, int initStartSpeed,
			int maxSpeed){
		this.x_pos = x_pos;
		this.y_pos = y_pos;
		this.x_dim = x_dim;
		this.y_dim = y_dim;
		this.initStartSpeed = initStartSpeed;
		this.maxSpeed = maxSpeed;		
	}
	
	
	public int x_pos = 0;
	public int y_pos = 0;
	public int x_dim = 6; //not sure or this should be declared here
	public int y_dim = 11; //not sure or this should be declared here
	public static int initStartSpeed; 
	public int maxSpeed; 
	public int speed;
	public int newSpeed;
	public int deltaT;
	public int new_x_pos;
	public int new_y_pos;	
	public int acc; // acceleration
	public static int MIN_X_VALUE = 0;
	public static int MAX_X_VALUE = 1023;
	public static int MIN_Y_VALUE = 0;
	public static int MAX_Y_VALUE = 767;
	public static int START_SPEED = getInitStartSpeed(); 
	public static int MAX_SPEED = 3;
	public static int MAX_SPEED_DUCK = 1;
	
	
	public int getXPos() {
		return x_pos;
	}
	public int getYPos() {
		return y_pos;
	}
	public int getXDim() {
		return x_dim;
	}
	public int getYDim() {
		return y_dim;
	}
	public static int getInitStartSpeed() {
		return initStartSpeed;
	}
	public int getMaxSpeed() {
		return maxSpeed;
	}
	
	
	/**
	 * @pre
	 * @return True if the horizontal position x_pos and 
	 *			and the vertical position y_pos stay in the 
	 *			game world.
	 *			| return (x_pos >= MIN_X_VALUE && x_pos <= MAX_X_VALUE
	 *				&& y_pos >= MIN_Y_VALUE && y_pos <= MAX_Y_VALUE) 
	 */
	public boolean isValidPosition() {
		return (getXPos() >= MIN_X_VALUE && getXPos() <= MAX_X_VALUE
				 && getYPos() >= MIN_Y_VALUE && getYPos() <= MAX_Y_VALUE);
	}
	
	
	/**
	 * NOMINAAL uitwerken
	 * @param x_pos 
	 * 			the horizontal position of Mazub
	 * @param y_pos
	 * 			the vertical position of Mazub
	 * @pre the position of Mazub must be valid
	 * 			| isValidPosition(getXPos(),getYPos())
	 * @post Mazub moved with a certain speed and acceleration
	 */
	public void startMove() {
		assert isValidPosition();
		speed = START_SPEED; 
		if (this.isDucked() == false) {
			acc = (int) 0.9;
			maxSpeed = getMaxSpeed();
		}
		else {
			acc = 0;
			maxSpeed = MAX_SPEED_DUCK;
		}
		
	}
	
	/**
	 * NOMINAAL uitwerken
	 */
	public void endMove(int x_pos, int y_pos) {
		speed = 0;
		acc = 0;
	}
	
	/**
	 * DEFENSIEF uitwerken
	 */
	public void advanceTime() {
		newSpeed = this.getSpeed() + acc*deltaT;
		if (this.getSpeed() == maxSpeed) {
			new_x_pos = this.getXPos() + speed*deltaT;			
		}
		else {			
			if (newSpeed>maxSpeed) {
				speed = maxSpeed;
				acc = 0;
			}
			else {
				speed = newSpeed;
			}
			new_x_pos = this.getXPos() + speed*deltaT;
		}
	}
	
	/**
	 * TOTAAL uitwerken
	 */
	public void startJump() {
		
	}
	
	/**
	 * TOTAAL uitwerken
	 */
	public void endJump() {
		
	}
	
	public boolean isDucked(){
		return (isDucked());
	}
	
	/**
	 * DEFENSIEF uitwerken
	 */
	
	public void startDuck() {
		isDucked = true;
	}
	
	/**
	 * DEFENSIEF uitwerken
	 */
	public void endDuck() {
		isDucked = false
	}
	
	/**
	 * NOMINAAL uitwerken
	 * GEEN formele documentatie nodig
	 */
	public void getCurrentSprite() {
		
	}
}
