package jumpingalien.part2.tests;

import static jumpingalien.tests.util.TestUtils.doubleArray;
import static jumpingalien.tests.util.TestUtils.intArray;
import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import java.util.concurrent.CopyOnWriteArrayList;

import jumpingalien.model.Mazub;
import jumpingalien.model.Orientation;
import jumpingalien.model.Plant;
import jumpingalien.model.Shark;
import jumpingalien.model.World;
import jumpingalien.part2.facade.Facade;
import jumpingalien.part2.facade.IFacadePart2;
import jumpingalien.util.ModelException;
import jumpingalien.util.Sprite;
import jumpingalien.util.Util;

import org.junit.Test;

public class PlantTest {
	
	public static final int FEATURE_AIR = 0;
	public static final int FEATURE_SOLID = 1;
	public static final int FEATURE_WATER = 2;
	public static final int FEATURE_MAGMA = 3;
	
	@Test 
	public void testAdvanceTimeCorrect() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 1, 1);
		Mazub alien = facade.createMazub(200, 499, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlant(0, 0, spriteArrayForSize(1, 1, 2));
		facade.addPlant(world, plant);
		for (int i = 0; i < 5; i++) {
			facade.advanceTime(world, 0.1);
		}
		// 0.5 sec* 0.5 m/s = 0.25 m = 25 pixels
		assertArrayEquals(intArray(25, 0), facade.getLocation(plant));
	}	
	
	@Test 
	public void testChangeOrientation() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 1, 1);
		Mazub alien = facade.createMazub(200, 499, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlant(0, 0, spriteArrayForSize(1, 1, 2));
		facade.addPlant(world, plant);
		for (int i = 0; i < 7; i++) {
			facade.advanceTime(world, 0.1);
		}
		// plant changed orientation after 0.5 seconds
		assertEquals(Orientation.LEFT, plant.getOrientation());
	}
	
	@Test(expected = ModelException.class)
	public void testNotWithinBoundaries() {
		IFacadePart2 facade = new Facade();
		@SuppressWarnings("unused")
		Plant plant = facade.createPlant(-5, -20, spriteArrayForSize(1, 1, 2));
	}
	
	@Test(expected = ModelException.class)
	public void testTooBigPosition() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(50, 3, 3, 1, 1, 1, 1);
		Plant plant = facade.createPlant(500, 500, spriteArrayForSize(1, 1, 2));
		facade.addPlant(world, plant);
	}
	
	@Test(expected = ModelException.class)
	public void testSpriteTooShort() {
		IFacadePart2 facade = new Facade();
		@SuppressWarnings("unused")
		Plant plant = facade.createPlant(0, 0, spriteArrayForSize(1, 1, 1));
	}
	
	@Test(expected = ModelException.class)
	public void testSpriteTooLong() {
		IFacadePart2 facade = new Facade();
		@SuppressWarnings("unused")
		Plant plant = facade.createPlant(0, 0, spriteArrayForSize(1, 1, 3));
	}
	
	@Test 
	public void testDie() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlant(1, 500, spriteArrayForSize(10, 10, 2));
		facade.setMazub(world, alien);
		facade.addPlant(world, plant);
		alien.startMoveRight();
		for (int i = 0; i < 2; i++) {
			facade.advanceTime(world, 0.1);
		}
		// Mazub has eaten the plant so his hitpoints augmented with 50
		assertEquals(alien.getHitpoints(), 150);
	}
	
	@Test 
	public void testRemove() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlant(1, 500, spriteArrayForSize(10, 10, 2));
		facade.setMazub(world, alien);
		facade.addPlant(world, plant);
		alien.startMoveRight();
		for (int i = 0; i < 7; i++) {
			facade.advanceTime(world, 0.1);
		}
		// Mazub has eaten the plant and 0.6 seconds later the plant should be removed
		assertEquals(world.getPlants(), new CopyOnWriteArrayList<Plant>());
	}
	
	@Test 
	public void testCorrectSpeed() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlant(500, 1000, spriteArrayForSize(1, 1, 2));
		facade.setMazub(world, alien);
		facade.addPlant(world, plant);
		facade.advanceTime(world, 0.1);
		assertArrayEquals(doubleArray(0.5, 0), plant.getVelocity(),
				Util.DEFAULT_EPSILON);
	}
	
	@Test 
	public void testFacadeGetPlants() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Sprite[] sprites = spriteArrayForSize(1, 1, 2);
		Plant plant = facade.createPlant(500, 1000, sprites);
		Plant plant2 = facade.createPlant(500, 1000, sprites);
		facade.setMazub(world, alien);
		facade.addPlant(world, plant);
		facade.addPlant(world, plant2);
		facade.advanceTime(world, 0.1);
		assertEquals(facade.getPlants(world).size(), 2);
		// 0.1 seconds passed
		assertArrayEquals(intArray(505, 1000), plant.getLocation());
		assertEquals(facade.getCurrentSprite(plant), sprites[1]);
	}
	
	@Test(expected = ModelException.class)
	public void testPlantFacadeInvalidPos() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Shark shark = facade.createShark(50000, 499, spriteArrayForSize(3, 3, 2));
		facade.setMazub(world, alien);
		facade.addShark(world, shark);
	}
	
	@Test(expected = ModelException.class)
	public void testPlantFacadeInvalidSprite() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		facade.addPlant(world, facade.createPlant(-500, 499, spriteArrayForSize(1, 1, 1)));
	}	
	
	
}
