package jumpingalien.model;

import java.util.ArrayList;
import java.util.List;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Immutable;
import be.kuleuven.cs.som.annotate.Raw;
import jumpingalien.util.Sprite;

public class Slime extends GameObject {
	
	/**
	 * Creates a new slime, located at the provided pixel location (x, y).
	 * The returned slime should not belong to a world.
	 * 
	 * @param x
	 *            The x-coordinate of the slime's initial position
	 * @param y
	 *            The y-coordinate of the slime's initial position
	 * @param sprites
	 *            An array of sprites for the new slime
	 * @param school
	 *            The initial school to which the new slime belongs
	 * @throws	IllegalPositionException
	 * 			The given position is not valid for the slime
	 * 			| !isValidPosition(x_pos,y_pos)
	 * @throws IllegalSpriteException
	 * 			The given sprite is not valid
	 * 			| !isValidSprite(sprites) 
	 */
// TODO school nog toewijzen	
	public Slime(int xPos,int yPos, Sprite[] sprites,School school) 
			throws IllegalPositionException, IllegalSpriteException {
		super(xPos, yPos, sprites);
		this.setSchool(school);
		this.getSchool().newSlime(this);
		this.setHitpoints(Slime.getInitHitpoints());
		this.setMaxSpeed(Slime.getMaxXSpeed());
	}

	// TODO alle veel te lange functies in slime is opsplitsen
	
	private static int LOSS_HITPOINTS_IN_WATER = 6;
	private static int getLossHitpointsInWater() {
		return LOSS_HITPOINTS_IN_WATER;
	}	 
	private double movementDuration = 0;
	private double getMovementDuration() {
		return movementDuration;
	}	
	private void setMovementDuration(double time) {
		this.movementDuration = time;
	}	
	private double timeSinceMove = 0;
	/**
	 * @return the timeSinceMove
	 */
	private double getTimeSinceMove() {
		return timeSinceMove;
	}
	/**
	 * @param timeSinceMove the timeSinceMove to set
	 */
	private void setTimeSinceMove(double time) {
		this.timeSinceMove = time;
	}
	private static int INIT_HITPOINTS = 100;
	private static int getInitHitpoints() {
		return INIT_HITPOINTS;
	}
	/**
	 * the horizontal acceleration of a slime
	 */
	private double xAcc = 0.7;
	@Override
	public double getXAcc() {
		return xAcc;
	}
	/**
	 * the maximum horizontal speed a slime can reach
	 */
	private static double MAX_X_SPEED = 2.5;
	/**
	 * the amount of hitpoints a slime loses when touching 
	 * a shark or mazub.
	 */
	private static int CONTACT_DAMAGE = 50;
	/**
	 * the damage every slime in the school looses when a single
	 * slime looses some hitpoints
	 */
	private int SCHOOL_DAMAGE = 1;
	/**
	 * the maximum amount of slime schools in a game world
	 */
	private int MAX_AMOUNT_OF_SCHOOLS = 10;		
	private School school;
	/**
	 * Returns the current school to which the given slime belongs.
	 * 
	 * @param slime
	 *            The slime for which to retrieve the school.
	 * 
	 * @return The current school of the given slime.
	 */
	public School getSchool() {
		return this.school;
	}
	public void setSchool(School school) {
		this.school = school;
	}
	
	// TODO ik kan niet vinden dat dit echt maar 100 mag zijn,
	// waar staat dat in de opgave (mss heb ik dat zelfs geschreven eigenlijk :) )
	// -> sharks beginnen met 100 hitpoints en kunnen er geen bijkrijgen
	private int MAX_HITPOINTS = 500;
	// waarom moet dit @override zijn? kunnen we dit niet gewoon weglaten aangezien 
	// MAX_POINTS in GameObject ook al 100 is?
	@Override
	/**
	 * the maximum amount of hitpoints
	 * @returnMAXHITPOINTS
	 */
	protected int getMaxHitpoints() {
		return MAX_HITPOINTS;
	}
	
//	GETTERS	

	private static double getMaxXSpeed() {
		return  MAX_X_SPEED;
	}	
	public static int getContactDamage() {
		return CONTACT_DAMAGE;
	}	
	private int getSchoolDamage() {
		return SCHOOL_DAMAGE;
	}
	private int getMaxAmountOfSchools() {
		return MAX_AMOUNT_OF_SCHOOLS;
	}
	
//	VALIDATIONS
	
	@Override
	protected boolean isValidSprite(Sprite[] sprites) {
		return sprites.length == 2;
	}
	
	private double[] checkSurroundings(double newXPos, double newYPos) {

		if (this.getOrientation() == Orientation.LEFT && againstLeftWall(newXPos,newYPos)) {
			newXPos = (this.getTilesLeft(newXPos,newYPos)[0][0] + 1) * getWorld().getTileLength();
			this.stopMoving();
		}
		if (this.getOrientation() == Orientation.RIGHT && againstRightWall(newXPos,newYPos)) {
			newXPos = (this.getTilesRight(newXPos,newYPos)[0][0]) * getWorld().getTileLength() - this.getSize()[0];
			this.stopMoving();
		}
		if (isAgainstRoof(newXPos,newYPos)) {
			newYPos = (this.getTilesAbove(newXPos,newYPos)[0][1]) * getWorld().getTileLength() - this.getSize()[1] -1;
			this.setYSpeed(0);
		}		
		if (this.isFalling() && this.onFloor(newXPos,newYPos)) {
			newYPos = ((this.getTilesUnder(newXPos,newYPos)[0][1] +1) * getWorld().getTileLength() -1);
			this.endFall();
		}		
		if (( ! this.isFalling()) && ( ! onFloor(newXPos,newYPos))){
			fall();
		}
		
		return new double[] {newXPos, newYPos};
	}
	
	// TODO betere naam zoeken
	private double [] collidesSomewhere(double x1, double xDim1, double y1, double yDim1, 
			double x2, double xDim2, double y2, double yDim2, double newXPos, double newYPos) {
		if (this.collidesRight(x1, xDim1, y1, yDim1, x2, xDim2, y2, yDim2)) {
			newXPos = x2 - xDim1;
			this.stopMoving();
		}
		if (this.collidesLeft(x1, xDim1, y1, yDim1, x2, xDim2, y2, yDim2)) {
			newXPos = x2 + xDim2;
			this.stopMoving();
		}
		if (this.collidesAbove(x1, xDim1, y1, yDim1, x2, xDim2, y2, yDim2)) {
			newYPos = y2 - yDim1;
			this.setYSpeed(0);
		}
		if (this.isFalling() &&  this.collidesUnder(x1, xDim1, y1, yDim1, x2, xDim2, y2, yDim2)) {
			newYPos = y2 + yDim2;
			this.endFall();
		}
		if (( ! this.isFalling()) && ( ! this.collidesUnder(x1, xDim1, y1, yDim1, x2, xDim2, y2, yDim2) && ( ! onFloor(newXPos,newYPos)))){
			this.fall();
		}
		return new double[] {newXPos, newYPos};
	}
	
	public double[] collidingSlimes(double newXPos, double newYPos) {		
		for(Slime other: this.getWorld().getSlimes()) {
			if(other != this) {
				double x1 = newXPos;
				double xDim1 = this.getXDim();
				double y1 = newYPos;
				double yDim1 = this.getYDim();
				double x2 = other.getXPos();
				double xDim2 = other.getXDim();
				double y2 = other.getYPos();
				double yDim2 = other.getYDim();
				boolean touched = false;
				double[] newPos = collidesSomewhere(x1, xDim1, y1, yDim1, x2, xDim2, y2,
						yDim2, newXPos, newYPos);
				newXPos = newPos[0];
				newYPos = newPos[1];
				if (touched) {
					if(this.getSchool().getLength() > other.getSchool().getLength()) {
						this.getSchool().addSlime(other);
					}
					else if (this.getSchool().getLength() < other.getSchool().getLength()) {
						other.getSchool().addSlime(this);
					}
				}
			}
		}
		return new double[] {newXPos, newYPos};
	}
	
	public double[] collidingSharksMazub(double newXPos, double newYPos) {		
		List<GameObject> allSharksMazub =  new ArrayList<GameObject>(this.getWorld().getSharks());
		allSharksMazub.add(this.getWorld().getAlien());
		for(GameObject other: allSharksMazub) {
			double x1 = newXPos;
			double xDim1 = this.getXDim();
			double y1 = newYPos;
			double yDim1 = this.getYDim();
			double x2 = other.getXPos();
			double xDim2 = other.getXDim();
			double y2 = other.getYPos();
			double yDim2 = other.getYDim();
			double[] newPos = collidesSomewhere(x1, xDim1, y1, yDim1, x2, xDim2, y2,
					yDim2, newXPos, newYPos);
			newXPos = newPos[0];
			newYPos = newPos[1];
		}
		return new double[] {newXPos, newYPos};
	}
	
	private void loseHitpointsBecauseOfFeature(double dt, double newXPos, double newYPos) {
		if (this.isInContactWithFeature(newXPos,newYPos,3)){
			this.setTimeInMagma(this.getTimeInMagma() + dt);
			if(this.getTimeInMagma() >= Slime.getBurnTime()) {
				this.loseHitpoints( (int) GameObject.getLossHitpointsInMagma());
				this.setTimeInMagma(0);
			}
		}
		if (this.isInContactWithFeature(newXPos,newYPos,2)){
			this.setTimeInWater(this.getTimeInWater() + dt);
			if(this.getTimeInWater() >= Slime.getDrownTime()) {
				this.loseHitpoints(Slime.getLossHitpointsInWater());
				this.setTimeInWater(0);
			}				
		}
		else {
			this.setTimeInWater(0);
			this.setTimeInMagma(0);
		}
	}
	
	public void advanceTime(double dt) throws IllegalDtException {
		if ( ! isValidDt(dt))
			throw new IllegalDtException(dt);
		
		if ( ! this.isDying()) {
			this.randomMovement(dt);
			
			double[] newCalculatedPos = this.calculateNewPos(dt);
			double newXPos = newCalculatedPos[0];
			double newYPos = newCalculatedPos[1];
			
			if( ! isWithinBoundaries(newXPos,newYPos)) {
				this.die();
				// TODO spel eindigen ofzo 
			}
			
			double[] newPos = checkSurroundings(newXPos,newYPos);
			newPos = collidingSlimes(newPos[0],newPos[1]);
			newPos = collidingSharksMazub(newPos[0],newPos[1]);
			this.setNewSpeed(dt);
			
			this.setXPos(newPos[0]);
			this.setYPos(newPos[1]);
			
			this.loseHitpointsBecauseOfFeature(dt, newXPos, newYPos);
						
			if (this.isImmune()) {
				if (this.getTimeSinceImmune() > this.getImmuneTime()) {
					this.setNotImmune();
					this.setTimeSinceImmune(0);				
				}
				else {
					this.setTimeSinceImmune(this.getTimeSinceImmune() + dt);
				}
			}
			System.out.println(this.getHitpoints());
			System.out.println(this.getSchool().getLength());
			
			if (this.getHitpoints() <= 0) {
				this.die();
			}
		}
		else {
			setTimeSinceDeath(this.getTimeSinceDeath() + dt);
			if (this.getTimeSinceDeath() >= GameObject.getTimeUntilRemove()) {
				this.remove();
			}
		}		
	}
	
	/**
	 * Return the current sprite image for the given slime.
	 * 
	 * @return The current sprite image for the given slime, determined by its
	 *         orientation as defined in the assignment.
	 */
	public Sprite getCurrentSprite(){
		assert isValidSprite(this.getSprite());
		if (this.getOrientation() == Orientation.RIGHT) {
			return sprites[1];
		}
		else {
			return sprites[0];
		}
	}
	
	public void remove() {
		this.getSchool().removeSlime(this);
		this.setSchool(null);
		this.getWorld().removeSlime(this);
		this.setWorld(null);		
	}
	
	private void randomMovement(double dt) {
		if(this.getTimeSinceMove() >= this.getMovementDuration()) {
			this.stopMove();
			this.setMovementDuration(Math.random() * 4 + 2);
			this.setTimeSinceMove(dt);
			if(Math.random()>=0.5) {
				this.startMoveRight();
			}
			else {
				this.startMoveLeft();
			}
		}
		else {
			this.setTimeSinceMove(this.getTimeSinceMove() + dt);
		}
	}	

	/**
	 * Mazub starts moving to the right
	 * @effect 	| 
	 */
	public void startMoveRight(){
		if(this.getOrientation() == Orientation.LEFT) {
			this.setXSpeed(0);
			this.setOrientationRight();
		}
	}
	
	/**
	 * Mazub starts moving to the left
	 * @effect 	|
	 */
	public void startMoveLeft(){
		this.setOrientationLeft();
	}	
	
	// TODO mag de acc hier ook 0 worden? dan kan dit vervangen worden door 
	//		stopMovingX in gameobject
	public void stopMove() {
		this.setXSpeed(0);
	}
	
	@Override
	public void loseHitpoints(int nb) {
		this.setHitpoints(this.getHitpoints() - nb);
		for (Slime other: this.getSchool().getMembers()) {
			if (other != this) {
				other.setHitpoints(other.getHitpoints() - 1);
			}
		}
	}
	
	
}
	
