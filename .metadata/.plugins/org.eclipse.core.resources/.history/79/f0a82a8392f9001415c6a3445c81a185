package jumpingalien.model;

import java.util.ArrayList;
import java.util.List;

import program.Program;
import be.kuleuven.cs.som.annotate.Immutable;
import be.kuleuven.cs.som.annotate.Raw;
import jumpingalien.model.exceptions.IllegalDtException;
import jumpingalien.model.exceptions.IllegalPositionException;
import jumpingalien.model.exceptions.IllegalSpriteException;
import jumpingalien.util.Sprite;

/**
 * A class that describes the movement of Mazub's evil twin Buzam
 * @author Ward Romanus, Pieter Van den Berghe
 *
 */
public class Buzam extends Mazub {

	public Buzam(int xPos, int yPos, Sprite[] sprites)
			throws IllegalPositionException, IllegalSpriteException {
		super(xPos, yPos, sprites);
		this.setInitStartSpeed(Mazub.getStartSpeed());
		this.setMaxSpeed(Mazub.getMaxMovingSpeed());
		this.setHitpoints(Buzam.getInitHitpoints());
	}
	
	public Buzam(int xPos, int yPos, Sprite[] sprites, Program program)
			throws IllegalPositionException, IllegalSpriteException {
		super(xPos, yPos, sprites);
		this.setProgram(program);
		this.setInitStartSpeed(Mazub.getStartSpeed());
		this.setMaxSpeed(Mazub.getMaxMovingSpeed());
		this.setHitpoints(Buzam.getInitHitpoints());
	}
	
	/**
	 * the default amount of hitpoints buzam possesses in the beginning of a game
	 */
	private static final int INIT_HITPOINTS = 500;
	/**
	 * the initial amount of hitpoints
	 * @return INITHITPOINTS
	 */
	@Immutable
	protected
	static int getInitHitpoints() {
		return INIT_HITPOINTS;
	}	
	
	@Override
	@Raw
	public void advanceTime(double dt) throws IllegalDtException {
		if ( ! isValidDt(dt))
			throw new IllegalDtException(dt);		
		if ( ! this.isDying()) {		
			this.changeTimeDependents(dt);
			
			if (this.getDuckShouldEnd()) {
				this.setDuckShouldEnd(false);
				this.endDuck();
			}
			
			this.loseHitpointsBecauseOfFeature(dt, this.getXPos(), this.getYPos());
			this.updateImmunity(dt);		
			
			if (this.getHitpoints() <= 0) {
				this.die();
			}
		}
		else {
				this.setTimeSinceDeath(this.getTimeSinceDeath() + dt);
				if (this.getTimeSinceDeath() > GameObject.getTimeUntilRemove()) {
					 this.remove();
			}
		}
	}
	
	/**
	 * adapts the position taking all Slimes, Sharks and Mazub into account, it also updates the hitpoints
	 * @param newXPos
	 * 			the newly calculated horizontal position
	 * @param newYPos
	 * 			the newly calculated vertical position
	 * @param dt
	 * 			the time interval
	 * @effect the list allSlimesSharks contains all the slimes and sharks in the world
	 * 			| allSlimesSharks = world.getSlimes()
	 * 			| allSlimesSharks.addAll(world.getSharks())
	 * @effect calculates the new position of mazub taking all the slimes and sharks
	 * 			in the world into account
	 * 			| boolean onGameObject = false;
	 * 			| double[] newPos = {newXPos, newYPos}; 
	 * 			| for each other: allSlimesSharks:
	 * 			| 	let 
	 * 			| 		double xDim1 = getXDim()
	 * 			|		double yDim1 = getYDim()
	 * 			| 		double x2 = other.getXPos()
	 * 			| 		double xDim2 = other.getXDim()
	 * 			| 		double y2 = other.getYPos()
	 * 			|		double yDim2 = other.getYPos()
	 * 			| 		boolean touched = false
	 * 			| 	in
	 * 			| 	newPos = collidesSomeWhere(newXpos, xDim1, newYPos, yDim1, x2, xDim2, y2)
	 * @effect the hitpoints of mazub and the sharks/slimes are updated taking the collisions into account
	 * 			| 	if newPos[3] == 1
	 * 			| 		then onGameObject = true
	 * 			| 	if newPos[2] == 1 && ( ! other.isDying()) 
	 * 			| 		then contactDamage(dt)
	 * 			| 		 	other.contactDamage(dt)
	 * @effect if Mazub is on top of another game object, his fall is ended, else Mazub falls
	 * 			| if (isFalling() && onGameObject())
	 * 			| 	then endFall()
	 * 			| else if ( ! isFalling() && ( ! onGameObject) && ( ! onFloor(newPos[0], newPos[1])
	 * 			| 	then fall()
	 * @return {newPos[0], newPos[1]}
	 */
	@Raw
	protected double[] collidingSlimesSharksMazub(double newXPos, double newYPos, double dt) {
		List<GameObject> allSlimesSharksMazub =  new ArrayList<GameObject>(this.getWorld().getSlimes());
		allSlimesSharksMazub.addAll(this.getWorld().getSharks());
		allSlimesSharksMazub.add(this.getWorld().getAlien());
		boolean onGameObject = false;
		double[] newPos = {newXPos, newYPos};
		for(GameObject other: allSlimesSharksMazub) {
			double xDim1 = this.getXDim();
			double yDim1 = this.getYDim();
			double x2 = other.getXPos();
			double xDim2 = other.getXDim();
			double y2 = other.getYPos();
			double yDim2 = other.getYDim();
			newPos = collidesSomewhere(newXPos, xDim1, newYPos, yDim1, x2, xDim2, y2, yDim2);
			if (newPos[3] == 1) {
				onGameObject = true;
			}
			if ( newPos[2] == 1 && ( ! other.isDying())) {
				other.contactDamage(dt);
				if ( ! this.collidesUnder(newPos[0], xDim1, newPos[1], yDim1, x2, xDim2, y2, yDim2)) {
					this.contactDamage(dt);
				}	
			}
		}
		if (this.isFalling() && onGameObject)  {
			this.endFall();
		}
		else if ( ! this.isFalling() && ( ! onGameObject) && ( ! this.onFloor(newPos[0],newPos[1]))) {
			fall();
		}
		return new double[] {newPos[0], newPos[1]};
	}
	
	
}
