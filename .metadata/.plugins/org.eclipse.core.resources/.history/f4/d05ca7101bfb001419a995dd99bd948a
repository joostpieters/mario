package jumpingalien.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.concurrent.CopyOnWriteArrayList;

import be.kuleuven.cs.som.annotate.Basic;
import be.kuleuven.cs.som.annotate.Immutable;
import be.kuleuven.cs.som.annotate.Raw;
import jumpingalien.model.exceptions.IllegalAmountOfCharactersException;
import jumpingalien.model.exceptions.IllegalDtException;
import jumpingalien.model.exceptions.IllegalNbTilesException;
import jumpingalien.model.exceptions.IllegalPixelException;
import jumpingalien.model.exceptions.IllegalPositionException;
import jumpingalien.model.exceptions.IllegalSettingException;
import jumpingalien.model.exceptions.IllegalTargetTileException;
import jumpingalien.model.exceptions.IllegalTileException;
import jumpingalien.model.exceptions.IllegalTileSizeException;
import jumpingalien.model.exceptions.IllegalVisibleWindowException;
import jumpingalien.part2.facade.IFacadePart2;

/**
 * A class that describes the game world
 * @author Pieter Van den Berghe, Ward Romanus
 * @invar the tile size is always valid
 * 			| isValidTileSize(this.getTileLength())
 * @invar the horizontal and vertical number of tiles are always valid
 * 			| isValidNbTiles(this.getNbTilesX()) && isValidNbTiles(this.getNbTilesY())
 * @invar the visible window must at all times be in the world
 * 			| (xVisibleWindow >= 0) 
 * 			| 	&& xVisibleWindow < (this.getWorldSizeInPixels()[0] 
 * 			| 	- this.getVisibleWindowWidth())
 * 			| (yVisibleWindow >= 0) 
 * 			| 	&& yVisibleWindow < (this.getWorldSizeInPixels()[1] 
 * 			| 	- this.getVisibleWindowHeight())
 * @invar the amount of characters in the world is always valid
 * 			| let 
 * 			| 	amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks()
 * 			| in
 * 			| 	! this.isValidAmountOfCharacters(amountOfCharacters)
 */
public class World {
	
	/**
	 * Create a new world with the given parameters.
	 * 
	 * @param tileSize
	 *            Length (in pixels) of a side of each square tile in the world
	 * @param nbTilesX
	 *            Number of tiles in the horizontal direction
	 * @param nbTilesY
	 *            Number of tiles in the vertical direction
	 * @param visibleWindowWidth
	 *            Width of the visible window, in pixels
	 * @param visibleWindowHeight
	 *            Height of the visible window, in pixels
	 * @param targetTileX
	 *            Tile x-coordinate of the target tile of the created world
	 * @param targetTileY
	 *            Tile y-coordinate of the target tile of the created world
	 * @throws IllegalTileSizeException
	 * 			the given tile size isn't valid
	 * 			| ! isValidTileSize(tileSize)
	 * @throws IllegalTargetTileException
	 * 			the given targetTile isn't valid
	 * 			| ! isValidTargetTile(targetTileX, targetTileY, nbTilesX, nbTilesY)
	 * @throws IllegalVisibleWindowException
	 * 			the given visible window isn't valid
	 * 			| ! isValidTargetTile(targetTileX, targetTileY, nbTilesX, nbTilesY)
	 * @throws IllegalNbTilesException
	 * 			the given number of tiles isn't valid
	 * 			| ! isValidNbTiles(nbTilesX) || ! isValidNbTiles(nbTilesY)
	 * @effect the new game world is created, the geological features of the entire world are by default air (0)
	 * 			| this.setTileSize(tileSize)
	 * 			| this.setNbTilesX(nbTilesX)
	 * 			| this.setNbTilesY(nbTilesY)
	 * 			| this.setVisibleWindowWidth(visibleWindowWidth)
	 * 			| this.setVisibleWindowHeight(visibleWindowHeight)
	 * 			| this.setTargetTileX(targetTileX)
	 * 			| this.setTargetTileY(targetTileY)
	 * 			| this.geologicalFeature = new int[nbTilesY][nbTilesX]
	 */
	@Raw
	public World(int tileSize, int nbTilesX, int nbTilesY,
			int visibleWindowWidth, int visibleWindowHeight, int targetTileX,
			int targetTileY) 
		throws IllegalTileSizeException, IllegalTargetTileException,
				IllegalVisibleWindowException, IllegalArgumentException, IllegalNbTilesException {
			if ( ! isValidTileSize(tileSize))
				throw new IllegalTileSizeException(tileSize);
			if  ( ! isValidNbTiles(nbTilesX))
				throw new IllegalNbTilesException(nbTilesX);
			if ( ! isValidNbTiles(nbTilesY))
				throw new IllegalNbTilesException(nbTilesY);
			if ( ! isValidTargetTile(targetTileX, targetTileY, nbTilesX, nbTilesY))
				throw new IllegalTargetTileException(targetTileX, targetTileY, nbTilesX, nbTilesY);
			if ( ! isValidVisibleWindow(visibleWindowWidth, visibleWindowHeight,tileSize, nbTilesX, nbTilesY))
				throw new IllegalVisibleWindowException(visibleWindowWidth, visibleWindowHeight);
		this.setTileSize(tileSize);
		this.setNbTilesX(nbTilesX);
		this.setNbTilesY(nbTilesY);
		this.setVisibleWindowWidth(visibleWindowWidth);
		this.setVisibleWindowHeight(visibleWindowHeight);
		this.setTargetTileX(targetTileX);
		this.setTargetTileY(targetTileY);
		this.geologicalFeature = new int[nbTilesY][nbTilesX];		
	}	
	
	/**
	 * the size of a side of a (square) tile
	 */
	private int tileSize;
	/**
	 * the amount of tiles in the x direction in the world
	 */
	private int nbTilesX;
	/**
	 * the amount of tiles in the y direction in the world
	 */
	private int nbTilesY;
	/**
	 * the width of the visible window in pixels
	 */
	private int visibleWindowWidth;
	/**
	 * the height of the visible window in pixels
	 */
	private int visibleWindowHeight;
	/**
	 * the horizontal position of the target tile
	 */
	private int targetTileX;
	/**
	 * the vertical position of the target tile
	 */
	private int targetTileY;
	/**
	 * the horizontal position of the visible window (of the bottom left pixel)
	 */
	private int xVisibleWindow;
	/**
	 * the vertical position of the visible window (of the bottom left pixel)
	 */
	private int yVisibleWindow;
	/**
	 * the geological feature of the tile with its bottom left pixel
	 * on the given position
	 */
	private int[][] geologicalFeature;
	/**
	 * the player character alien
	 */
	private Mazub alien;
	/**
	 * the evil brother of the alien
	 */
	private Buzam buzam;
	/**
	 * a list of all the sharks in the world
	 */
	private List<Shark> sharks = new CopyOnWriteArrayList<Shark>();
	/**
	 * a list of all the plants in the world
	 */
	private List<Plant> plants = new CopyOnWriteArrayList<Plant>();
	/**
	 * a list of all the slimes in the world
	 */
	private List<Slime> slimes = new CopyOnWriteArrayList<Slime>();	
	/**
	 * A boolean to reflect or the game has started
	 */
	private boolean gameStarted = false;
	
//	GETTERS
	
	/**
	 * Returns the size of the given game world, in number of pixels.
	 * 
	 * @return The size of the game world, in pixels, as an array of two
	 *         elements: width (X) and height (Y), in that order.
	 * 			| {getX(), getY()}
	 */
	@Basic @Immutable 
	public int[] getWorldSizeInPixels() {
		return new int[] {getX(),getY()};
	}	
	/**
	 * Returns the length of a square tile side in the given world.
	 * 
	 * @return The length of a square tile side, expressed as a number of
	 *         pixels.
	 * 			| tilesize
	 */
	@Basic @Immutable 
	public int getTileLength() {
		return this.tileSize;
	}		
	/**
	 * @return the number of tiles in the horizontal direction
	 * 			| nbTilesX
	 */
	@Basic @Immutable 
	private int getNbTilesX() {
		return nbTilesX;
	}
	/**
	 * @return the number of tiles in the vertical direction
	 * 			| nbTilesY
	 */
	@Basic @Immutable 
	private int getNbTilesY() {
		return nbTilesY;
	}
	/**
	 * @return the width of the visible window
	 * 			| visibleWindowWidth
	 */
	@Basic @Immutable 
	private int getVisibleWindowWidth() {
		return visibleWindowWidth;
	}
	/**
	 * @return the height of the visible window
	 * 			| visibleWindowHeight
	 */
	@Basic @Immutable 
	private int getVisibleWindowHeight() {
		return visibleWindowHeight;
	}
	/**
	 * @return the horizontal position of the targetTile
	 * 			| targetTileX
	 */
	@Basic @Immutable 
	private int getTargetTileX() {
		return targetTileX;
	}
	/**
	 * @return the vertical position of the targetTile
	 * 			| targetTileY
	 */
	@Basic @Immutable 
	private int getTargetTileY() {
		return targetTileY;
	}
	/**
	 * Return the coordinates of the rectangular visible window that moves
	 * together with Mazub.
	 * 
	 * @return The pixel coordinates of the visible window, in the order
	 *         left, bottom, right, top
	 * 			| {getXVisibleWindow(), getYVisibleWindow(), getXVisibleWindow()
	 * 			|	+ getVisibleWindowWidth(), getYVisibleWindow() + getVisibleWindowHeight()}
	 */
	@Basic
	public int[] getVisibleWindow() {
		return new int[] {this.getXVisibleWindow(), this.getYVisibleWindow(),
				this.getXVisibleWindow() + this.getVisibleWindowWidth(),
				this.getYVisibleWindow() + this.getVisibleWindowHeight()};
	}
	/**
	 * returns the player character alien
	 * @return the player character alien
	 * 			| alien
	 */
	@Basic @Raw
	public Mazub getAlien() {
		return this.alien;
	}
	/**
	 * returns the buzam
	 * @return the buzam
	 * 			| buzam
	 */
	@Basic @Raw
	public Buzam getBuzam() {
		return this.buzam;
	}
	/**
	 * Returns the bottom left pixel coordinate of the tile at the given tile
	 * position.
	 * 
	 * @param tileX
	 *            The x-position x_T of the tile
	 * @param tileY
	 *            The y-position y_T of the tile
	 * @return An array which contains the x-coordinate and y-coordinate of the
	 *         bottom left pixel of the given tile, in that order.
	 * 			| {tileX * getTileLength(), tileY * getTileLength()}
	 */
	@Basic @Raw
	public int[] getBottomLeftPixelOfTile(int tileX, int tileY) {
		return new int[] {tileX * this.getTileLength(),
				tileY * this.getTileLength()};
	}
	/**
	 * Returns the tile coordinate of the tile at the given pixels.
	 * 
	 * @param pixelX
	 *            The x-pixel
	 * @param pixelY
	 *            The y-pixel
	 * @return An array which contains the x-coordinate and y-coordinate of the
	 *          given tile, in that order.
	 */
	@Basic @Raw
	public int[] getTileOfPixels(int pixelX, int pixelY) {
		return new int[] {(pixelX - pixelX % this.getTileLength()) / this.getTileLength(),
				(pixelY - pixelY % this.getTileLength()) / this.getTileLength()};
	}
	/**
	 * Returns the tile positions of all tiles within the given rectangular
	 * region. 
	 * @param pixelLeft
	 *            The x-coordinate of the left side of the rectangular region.
	 * @param pixelBottom
	 *            The y-coordinate of the bottom side of the rectangular region.
	 * @param pixelRight
	 *            The x-coordinate of the right side of the rectangular region.
	 * @param pixelTop
	 *            The y-coordinate of the top side of the rectangular region.
	 * 
	 * @return An array of tile positions, where each position (x_T, y_T) is
	 *         represented as an array of 2 elements, containing the horizontal
	 *         (x_T) and vertical (y_T) coordinate of a tile in that order.
	 *         The returned array is ordered from left to right,
	 *         bottom to top: all positions of the bottom row (ordered from
	 *         small to large x_T) precede the positions of the row above that.
	 *         | let
	 *         | 	int posLeft = this.getTileOfPixels(pixelLeft,pixelBottom)[0]
	 *         | 	int posBottom = this.getTileOfPixels(pixelLeft,pixelBottom)[1]
	 *         | 	int posRight = this.getTileOfPixels(pixelRight,pixelTop)[0]
	 *         | 	int posTop = this.getTileOfPixels(pixelRight,pixelTop)[1]
	 *         | 	int[][] array = new int[(posRight - posLeft + 1) * (posTop - posBottom +1)][2]
	 *         | 	int counter = 0
	 *         | in
	 *         | 	for each int i=posBottom; i <= posTop;i++ :
	 *         | 		for each int j=posLeft; j <= posRight;j++ :
	 *         | 			array[counter][0] = j
	 *         | 			array[counter][1] = i
	 *         | 			counter++
	 *         | 	return array
	 */
	@Basic @Raw
	public int[][] getTilePositionsIn(int pixelLeft, int pixelBottom,
			int pixelRight, int pixelTop) {
		int posLeft = this.getTileOfPixels(pixelLeft,pixelBottom)[0];
		int posBottom = this.getTileOfPixels(pixelLeft,pixelBottom)[1];
		int posRight = this.getTileOfPixels(pixelRight,pixelTop)[0];
		int posTop = this.getTileOfPixels(pixelRight,pixelTop)[1];
		int[][] array = new int[(posRight - posLeft + 1) * (posTop - posBottom +1)][2];		
		int counter = 0;
		for (int i = posBottom; i <= posTop; i++ ) {
			for (int j = posLeft; j <= posRight; j++){
				array[counter][0] = j;
				array[counter][1] = i;
				counter++;
			}
		}
		return array;
	}	
	/**
	 * Returns the geological feature of the tile with its bottom left pixel at
	 * the given position.
	 * 
	 * @param world
	 *            The world containing the tile for which the
	 *            geological feature should be returned.
	 * 
	 * @param pixelX
	 *            The x-position of the pixel at the bottom left of the tile for
	 *            which the geological feature should be returned.
	 * @param pixelY
	 *            The y-position of the pixel at the bottom left of the tile for
	 *            which the geological feature should be returned.
	 * 
	 * @return The type of the tile with the given bottom left pixel position,
	 *         where
	 *         <ul>
	 *         <li>the value 0 is returned for an <b>air</b> tile;</li>
	 *         <li>the value 1 is returned for a <b>solid ground</b> tile;</li>
	 *         <li>the value 2 is returned for a <b>water</b> tile;</li>
	 *         <li>the value 3 is returned for a <b>magma</b> tile.</li>
	 *         </ul>
	 *         
	 *         | this.geologicalFeature[pixelY/this.getTileLength()][pixelX/this.getTileLength()]
	 * 
	 * @note This method must return its result in constant time.
	 * 
	 * @throw IllegalPixelException if the given position does not correspond to the
	 *        bottom left pixel of a tile.
	 */
	@Basic @Raw
	public int getGeologicalFeature(int pixelX, int pixelY)
			throws IllegalPixelException {
				if ( ! isValidBottomLeftPixel(pixelX, pixelY))
					throw new IllegalPixelException(pixelX,pixelY);
		return this.geologicalFeature[pixelY/this.getTileLength()][pixelX/this.getTileLength()];
	}	
	/**
	 * 
	 * @return the amount of horizontal pixels in the world
	 * 			| nbTilesX * tileLength
	 */
	@Basic @Immutable 
	public int getX() {
		return this.getNbTilesX() * this.getTileLength();
	}	
	/**
	 * 
	 * @return the amount of vertical pixels in the world
	 * 			| nbTilesY * tileLength
	 */
	@Basic @Immutable 
	public int getY() {
		return this.getNbTilesY() * this.getTileLength();
	}
	/**
	 * the collection of all the plants in the world
	 * @return the list containing every plant in the world
	 * 			| plants
	 */
	@Basic 
	public Collection<Plant> getPlants() {
		return new CopyOnWriteArrayList<Plant>(this.plants);
	}
	/**
	 * the collection of all the sharks in the world
	 * @return the list containing every shark in the world
	 * 			| sharks
	 */
	@Basic
	public Collection<Shark> getSharks() {
		return new CopyOnWriteArrayList<Shark>(this.sharks);
	}
	/**
	 * the collection of all the slimes in the world
	 * @return the list containing every slime in the world
	 * 			| slime
	 */
	@Basic
	public Collection<Slime> getSlimes() {
		return new CopyOnWriteArrayList<Slime>(this.slimes);
	}
	/**
	 * the amount of plants in the world
	 * @return number of plants
	 * 			| plants.size()
	 */
	@Basic 
	private int getNbPlants() {
		return plants.size();
	}
	/**
	 * the amount of sharks in the world
	 * @return number of sharks
	 * 			| sharks.size()
	 */
	@Basic
	private int getNbSharks() {
		return sharks.size();
	}
	/**
	 * the amount of slimes in the world
	 * @return number of slimes
	 * 			| slimes.size()
	 */
	@Basic
	private int getNbSlimes() {
		return slimes.size();
	}
	/**
	 * @return the horizontal amount of pixels of the VisibleWindow
	 * 			| XVisibleWindow
	 */
	@Basic
	private int getXVisibleWindow() {
		return xVisibleWindow;
	}
	/**
	 * @return the vertical amount of pixels of the VisibleWindow
	 * 			| YVisibleWindow
	 */
	@Basic
	private int getYVisibleWindow() {
		return yVisibleWindow;
	}
	/**
	 * Returns or the game has already started
	 * @return gameStarted
	 * 			| gameStarted
	 */
	@Basic
	private boolean isGameStarted() {
		return this.gameStarted;
	}
	/**
	 * returns a collection of all gameObjects in this world
	 * @effect the collection list contains all game objects
	 * 			| Collection<GameObject> list = new ArrayList<GameObject>()
	 * 			| list.addAll(this.getSharks())
	 * 			| list.addAll(this.getSlimes())
	 * 			| list.addAll(this.getPlants())
	 * 			| list.add(this.getAlien())
	 * 			| list.add(this.getBuzam())
	 * @return the collection list
	 * 			| return list
	 */
	public Collection<GameObject> listAllGameObjects() {
		Collection<GameObject> list = new ArrayList<GameObject>();
		list.addAll(this.getSharks());
		list.addAll(this.getSlimes());
		list.addAll(this.getPlants());
		list.add(this.getAlien());
		list.add(this.getBuzam());
		return list;
	}
	
	/**
	 * returns an arraylist of all impassable tiles in this world
	 * @effect the collection list contains all impassable tiles
	 * 			| Collection<Tile> list = new ArrayList<Tile>()
	 * 			| for(int[] tile: this.getTilePositionsIn(0,0,this.getX(), this.getY()))
	 * 			| 	try 
	 * 			| 		if (this.getGeologicalFeature(tile[0] * this.getTileLength(), tile[1] * this.getTileLength()) == 3)
	 * 			| 			list.add(new Tile(tile[0], tile[1], this))
	 * 			|		catch (IllegalPixelException e) 
	 * 			|			System.out.println("Pixelexception in listAllImpassableTiles")
	 * @return the Arraylist list
	 * 			| return list
	 */
	public Collection<Tile> listAllImpassableTiles() {
		Collection<Tile> list = new ArrayList<Tile>();
		for(int[] tile: this.getTilePositionsIn(0,0,this.getX(), this.getY())) {
			try {
				if (this.getGeologicalFeature(tile[0] * this.getTileLength(), tile[1] * this.getTileLength()) == 3) {
					list.add(new Tile(tile[0], tile[1], this));
				}
			} catch (IllegalPixelException e) {
				System.out.println("Pixelexception in listAllImpassableTiles");
			}
		}
		return list;
	}
	
//	SETTERS	
	
	/**
	 * @param tileSize the tileSize to set
	 * @throws IllegalTileSizeException 
	 * 			The tileSize must be valid
	 * 			| ! isValidTileSize(tileSize)
	 * @post the tileSize is set to the given value
	 * 			| this.tileSize = tileSize
	 */
	@Raw
	private void setTileSize(int tileSize) throws IllegalTileSizeException {
		if ( ! this.isValidTileSize(tileSize)) {
			throw new IllegalTileSizeException(tileSize);
		}
		this.tileSize = tileSize;
	}
	/**
	 * @param nbTilesX the nbTilesX to set
	 * @throws IllegalNbTilesException 
	 * 			The horizontal number of tiles has to be valid
	 * 			| ! isValidNbTiles(nbTilesX)
	 * @post the number of tiles (horizontally) is set to the given amount
	 * 			| this.nbTilesX = nbTilesX
	 */
	@Raw
	private void setNbTilesX(int nbTilesX) throws IllegalNbTilesException {
		if( ! this.isValidNbTiles(nbTilesX)) {
			throw new IllegalNbTilesException(nbTilesX);
		}
		this.nbTilesX = nbTilesX;
	}
	/**
	 * @param nbTilesY the nbTilesY to set
	 * @throws IllegalNbTilesException 
	 * 			The vertical number of tiles has to be valid
	 * 			| ! isValidNbTiles(nbTilesY)
	 * @post the number of tiles (vertically) is set to the given amount
	 * 			| this.nbTilesY = nbTilesY
	 */
	@Raw
	private void setNbTilesY(int nbTilesY) throws IllegalNbTilesException {
		if( ! this.isValidNbTiles(nbTilesY)) {
			throw new IllegalNbTilesException(nbTilesY);
		}
		this.nbTilesY = nbTilesY;
	}
	/**
	 * @param visibleWindowWidth the visibleWindowWidth to set
	 * @pre visibleWindowWidth should be positive and smaller than
	 * 		the width of the world
	 * 			| visibleWindowWidth > 0
	 * 			| visibleWindowWidth <= this.getX()
	 * @post the width of the visible window is equal to the given int
	 * 			| this.visibleWindowWidth = visibleWindowWidth
	 */
	@Raw
	private void setVisibleWindowWidth(int visibleWindowWidth) {
		assert visibleWindowWidth > 0;
		assert visibleWindowWidth <= this.getX();
		this.visibleWindowWidth = visibleWindowWidth;
	}
	/**
	 * @param visibleWindowHeight the visibleWindowHeight to set
	 * @pre visibleWindowHeight should be positive and smaller than the
	 * 		height of the world
	 * 			| visibleWindowHeight > 0
	 * 			| visibleWindowHeight <= this.getY()
	 * @post the height of the visible window is equal to the given int
	 * 			| this.visibleWindowHeight = visibleWindowHeight
	 */
	@Raw
	private void setVisibleWindowHeight(int visibleWindowHeight) {
		assert visibleWindowHeight > 0;
		assert visibleWindowHeight <= this.getY();
		this.visibleWindowHeight = visibleWindowHeight;
	}
	/**
	 * @param targetTileX the targetTileX to set
	 * @pre targetTileX should be zero or positive
	 * 			| targetTileX >= 0
	 * @post the horizontal coordinate of the targetTile is equal to the given int
	 * 			| this.targetTileX =  targetTileX
	 */
	@Raw
	private void setTargetTileX(int targetTileX) {
		assert targetTileX >= 0;
		this.targetTileX = targetTileX;
	}
	/**
	 * @param targetTileY the targetTileY to set
	 * @pre targetTileY should be zero or positive
	 * 			| targetTileY >= 0
	 * @post the vertical coordinate of the targetTile is equal to the given int
	 * 			| this.targetTileY = targetTileY
	 */
	@Raw
	private void setTargetTileY(int targetTileY) {
		assert targetTileY >= 0;
		this.targetTileY = targetTileY;
	}	
	/**
	 * @param xVisibleWindow the xVisibleWindow to set
	 * @pre xVisibleWindow should be zero or positive
	 * 			| xVisibleWindow >= 0
	 * @post the horizontal position of the bottom left pixel of the visible window
	 * 		 is equal to the given value
	 * 			| this.xVisibleWindow = xVisibleWindow
	 */
	@Raw
	private void setXVisibleWindow(int xVisibleWindow) {
		assert xVisibleWindow >= 0;
		assert xVisibleWindow < (this.getWorldSizeInPixels()[0] - this.getVisibleWindowWidth());
		this.xVisibleWindow = xVisibleWindow;
	}
	/**
	 * @param yVisibleWindow the yVisibleWindow to set
	 * @pre yVisibleWindow should be zero or positive
	 * 			| yVisibleWindow >= 0
	 * @post the vertical position of the bottom left pixel of the visible window
	 * 		 is equal to the given value
	 * 			| this.yVisibleWindow = yVisibleWindow
	 */
	@Raw
	private void setYVisibleWindow(int yVisibleWindow) {
		assert yVisibleWindow >= 0;
		assert yVisibleWindow < (this.getWorldSizeInPixels()[1] - this.getVisibleWindowHeight());
		this.yVisibleWindow = yVisibleWindow;
	}
	/**
	 * Modify the geological type of a specific tile in the given world to a
	 * given type.
	 * @throws IllegalSettingException 
	 * 			A tile can not be set, after the game has started
	 * 			| this.isGameStarted
	 * @param tileX
	 *            The x-position x_T of the tile for which the type needs to be
	 *            modified
	 * @param tileY
	 *            The y-position y_T of the tile for which the type needs to be
	 *            modified
	 * @param tileType
	 *            The new type for the given tile, where
	 *            <ul>
	 *            <li>the value 0 is provided for an <b>air</b> tile;</li>
	 *            <li>the value 1 is provided for a <b>solid ground</b> tile;</li>
	 *            <li>the value 2 is provided for a <b>water</b> tile;</li>
	 *            <li>the value 3 is provided for a <b>magma</b> tile.</li>
	 *            </ul>
	 * @post the geological feature of the tile at the given position is equal to 
	 * 		 the given tileType
	 * 			| this.geologicalFeature[tileY][tileX] = tileType
	 */
	@Raw
	public void setGeologicalFeature(int tileX, int tileY, int tileType)
		throws IllegalTileException, IllegalSettingException {
		if ( ! isValidTile(tileX, tileY, tileType)) {
			throw new IllegalTileException(tileX, tileY, tileType);
		}
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		this.geologicalFeature[tileY][tileX] = tileType;
	}
	/**
	 * Sets the boolean gameStarted on true
	 * @param bool
	 * 			the boolean to set gameStarted to
	 */
	private void setGameStarted(boolean bool) {
		this.gameStarted = true;
	}
	/**
	 * @param the player character
	 * 			| alien
	 * @throws IllegalSettingException 
	 * 			An alien can not be set, after the game has started
	 * 			| this.isGameStarted
	 * @throws IllegalPositionException 
	 * 			The alien has to be within the boundaries of the world
	 *          | ! alien.isWithinBoundaries(alien.getLocation()[0], alien.getLocation()[1]))
	 * @pre	the alien should not be zero
	 * 			| alien != null
	 * @pre the world should not have this alien already as alien
	 * 			| ! this.hasAlien()
	 * @effect the alien's world is equal to this world
	 * 			| alien.setWorld(this)
	 * @post the player character alien is equal to the given Mazub
	 * 			| this.alien = alien
	 */
	@Raw
	public void setAlien(Mazub alien) throws IllegalSettingException, IllegalPositionException {
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		assert alien != null;
	    assert ! this.hasAlien(alien);
	    alien.setWorld(this);
	    if (! alien.isWithinBoundaries(alien.getLocation()[0], alien.getLocation()[1])) {
			throw new IllegalPositionException(alien.getLocation()[0], alien.getLocation()[1]);
		}
		this.alien = alien;
	}
	/**
	 * @param the player character's evil twin
	 * 			| buzam
	 * @throws IllegalSettingException 
	 * 			An alien can not be set, after the game has started
	 * 			| this.isGameStarted
	 * @throws IllegalPositionException 
	 * 			The buzam has to be within the boundaries of the world
	 *          | ! buzam.isWithinBoundaries(alien.getLocation()[0], alien.getLocation()[1]))
	 * @pre	the buzam should not be zero
	 * 			| buzam != null
	 * @pre the world should not have this alien already as alien
	 * 			| ! this.hasBuzam()
	 * @effect the alien's world is equal to this world
	 * 			| buzam.setWorld(this)
	 * @post the player character alien is equal to the given Mazub
	 * 			| this.buzam = buzam
	 */
	@Raw
	public void setBuzam(Buzam buzam) throws IllegalSettingException, IllegalPositionException {
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		assert buzam != null;
	    assert ! this.hasBuzam(buzam);
	    buzam.setWorld(this);
	    if (! buzam.isWithinBoundaries(buzam.getLocation()[0], buzam.getLocation()[1])) {
			throw new IllegalPositionException(buzam.getLocation()[0], buzam.getLocation()[1]);
		}
		this.buzam = buzam;
	}
	/**
	 * removes the Mazub alien from the game world
	 * @param the player character
	 * 			| alien
	 * @pre the alien has to exist
	 * 			| alien != null
	 * @post the alien is set to null
	 * 			| this.alien = null
	 */
	@Raw
	public void removeAlien(@Raw Mazub alien) {
		assert this.hasAlien(alien);
		assert alien != null;
		this.alien = null;
	}
	/**
	 * removes the Buzam buzam from the game world
	 * @param the player character's evil twin
	 * 			| buzam
	 * @pre the buzam has to exist
	 * 			| buzam != null
	 * @post the buzam is set to null
	 * 			| this.buzam = null
	 */
	@Raw
	public void removeBuzam(@Raw Buzam buzam) {
		assert this.hasBuzam(buzam);
		assert buzam != null;
		this.buzam = null;
	}
	/**
	 * removes the Slime slime from the game world
	 * @param the Slime to remove
	 * 			| slime
	 * @pre this has to contain a slime
	 * 			| hasSlime(slime)
	 * @pre the slime may not be equal to null
	 * 			| slime != null
	 * @post the Slime slime is removed from the game world
	 * 			| this.slimes.remove(slime)
	 */
	@Raw
	public void removeSlime(@Raw Slime slime) {
		assert this.hasSlime(slime);
		assert slime != null;
		this.slimes.remove(slime);
	}
	/**
	 * removes the Plant plant from the game world
	 * @param the Plant to remove
	 * 			| plant
	 * @pre this has to contain a plant
	 * 			| hasPlant(plant)
	 * @pre the plant may not be equal to null
	 * 			| plant != null
	 * @post the Plant plant is removed from the game world
	 * 			| this.plants.remove(plant)
	 */
	@Raw
	public void removePlant(@Raw Plant plant) {
		assert this.hasPlant(plant);
		assert plant != null;
		this.plants.remove(plant);
	}
	/**
	 * removes the Shark shark from the game world
	 * @param the Shark to remove
	 * 			| shark
	 * @pre this has to contain a shark
	 * 			| hasShark(shark)
	 * @pre the shark may not be equal to null
	 * 			| shark != null
	 * @post the Shark shark is removed from the game world
	 * 			| this.sharks.remove(shark)
	 */
	@Raw
	public void removeShark(@Raw Shark shark) {
		assert this.hasShark(shark);
		assert shark != null;
		this.sharks.remove(shark);
	}
	/**
	 * adds the Slime slime to the world
	 * @param the slime to add
	 * 			| slime
	 * @throws IllegalSettingException 
	 * 			A slime can not be add, after the game has started
	 * 			| this.isGameStarted
	 * @throws IllegalAmountOfCharactersException 
	 * 			The amount of characters has to be valid
	 * 			| let 
	 * 			| 	amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1
	 * 			| in
	 * 			| 	! this.isValidAmountOfCharacters(amountOfCharacters)
	 * @throws IllegalPositionException 
	 * 			The slime has to be within the boundaries of the world
	 *          | ! slime.isWithinBoundaries(slime.getLocation()[0], slime.getLocation()[1])
	 * @pre the slime may not be equal to null
	 * 			| slime != null
	 * @pre the game world may not already contain this slime
	 * 			| ! hasSlime(slime)
	 * @effect the slime's world is equal to this world
	 * 			| slime.setWorld(this)
	 * @effect the slime is added to slimes
	 * 			| slimes.add(slime)
	 */
	@Raw
	public void addSlime(Slime slime) throws IllegalSettingException, 
				IllegalPositionException, IllegalAmountOfCharactersException {
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		int amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1;
		if( ! this.isValidAmountOfCharacters(amountOfCharacters)) {
			throw new IllegalAmountOfCharactersException(amountOfCharacters);
		}
		assert slime != null;
	    assert ! this.hasSlime(slime);
	    slime.setWorld(this);
	    if(! slime.isWithinBoundaries(slime.getLocation()[0],slime.getLocation()[1])) {
			throw new IllegalPositionException(slime.getLocation()[0],slime.getLocation()[1]);
		}
		this.slimes.add(slime);
	}
	/**
	 * adds the Shark shark to the world
	 * @param the shark to add
	 * 			| shark
	 * @throws IllegalSettingException 
	 * 			A shark can not be add, after the game has started
	 * 			| this.isGameStarted
	 * @throws IllegalPositionException 
	 * 			The shark has to be within the boundaries of the world
	 *          | ! shark.isWithinBoundaries(shark.getLocation()[0], shark.getLocation()[1])
	 * @throws IllegalAmountOfCharactersException 
	 * 			The amount of characters has to be valid
	 * 			| let 
	 * 			| 	amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1
	 * 			| in
	 * 			| 	! this.isValidAmountOfCharacters(amountOfCharacters)
	 * @pre the shark may not be equal to null
	 * 			| shark != null
	 * @pre the game world may not already contain this shark
	 * 			| ! hasShark(shark)
	 * @effect the shark's world is equal to this world
	 * 			| shark.setWorld(this)
	 * @effect the shark is added to shark
	 * 			| sharks.add(shark)
	 */
	@Raw
	public void addShark(Shark shark) throws IllegalSettingException, 
				IllegalPositionException, IllegalAmountOfCharactersException {
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		int amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1;
		if( ! this.isValidAmountOfCharacters(amountOfCharacters)) {
			throw new IllegalAmountOfCharactersException(amountOfCharacters);
		}
		assert shark != null;
	    assert ! this.hasShark(shark);
	    shark.setWorld(this);
	    if(! shark.isWithinBoundaries(shark.getLocation()[0], shark.getLocation()[1])) {
			throw new IllegalPositionException(shark.getLocation()[0], shark.getLocation()[1]);
		}
		this.sharks.add(shark);
	}
	/**
	 * adds the Plant slime to the world
	 * @param the plant to add
	 * 			| plant
	 * @throws IllegalSettingException 
	 * 			A plant can not be add, after the game has started
	 * 			| ! this.isGameStarted
	 * @throws IllegalPositionException 
	 * 			The plant has to be within the boundaries of the world
	 *          | ! plant.isWithinBoundaries(plant.getLocation()[0],plant.getLocation()[1])
	 * @throws IllegalAmountOfCharactersException 
	 * 			The amount of characters has to be valid
	 * 			| let 
	 * 			| 	amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1
	 * 			| in
	 * 			| 	! this.isValidAmountOfCharacters(amountOfCharacters)
	 * @pre the plant may not be equal to null
	 * 			| plant != null
	 * @pre the game world may not already contain this plant
	 * 			| ! hasPlant(plant)
	 * @effect the plant's world is equal to this world
	 * 			| plant.setWorld(this)
	 * @effect the plant is added to plants
	 * 			| plants.add(plant)
	 */
	@Raw
	public void addPlant(Plant plant) throws IllegalSettingException, IllegalPositionException,
				IllegalAmountOfCharactersException {
		if ( this.isGameStarted()) {
			throw new IllegalSettingException();
		}
		int amountOfCharacters = this.getNbPlants() + this.getNbSlimes() + this.getNbSharks() + 1;
		if( ! this.isValidAmountOfCharacters(amountOfCharacters)) {
			throw new IllegalAmountOfCharactersException(amountOfCharacters);
		}
		assert plant != null;
	    assert ! this.hasPlant(plant);
	    plant.setWorld(this);
	    if(! plant.isWithinBoundaries(plant.getLocation()[0], plant.getLocation()[1])) {
			throw new IllegalPositionException(plant.getLocation()[0], plant.getLocation()[1]);
		}
		this.plants.add(plant);
		
	}
	/**
	 * returns true if this world has a Plant plant
	 * @param the plant to check
	 * 			| plant
	 * @return this.plants.contains(plant)
	 */
	@Raw
	private boolean hasPlant(Plant plant) {
		return this.plants.contains(plant);
	}
	/**
	 * returns true if this world has a Shark shark
	 * @param the shark to check
	 * 			| shark
	 * @return this.sharks.contains(shark)
	 */
	@Raw
	private boolean hasShark(Shark shark) {
		return this.sharks.contains(shark);
	}
	/**
	 * returns true if this world has a Slime slime
	 * @param the slime to check
	 * 			| slime
	 * @return this.slimes.contains(slime)
	 */
	@Raw
	private boolean hasSlime(Slime slime) {
		return this.slimes.contains(slime);
	}	
	/**
	 * Returns true if this world has the given alien as alien
	 * @param alien
	 * 			the alien to check
	 * @return true if the alien of the world equals the given alien
	 * 			|  this.getAlien() == alien
	 */
	@Raw
	private boolean hasAlien(Mazub alien) {
		return this.getAlien() == alien;
	}
	// TODO commentaar
	/**
	 * Returns true if this world has the given alien as alien
	 * @param alien
	 * 			the alien to check
	 * @return true if the alien of the world equals the given alien
	 * 			|  this.getAlien() == alien
	 */
	@Raw
	private boolean hasBuzam(Buzam buzam) {
		return this.getBuzam() == buzam;
	}
	
//	VALIDATIONS
	
	/**
	 * returns true if the given tileSize is valid (greater than 0)
	 * @param the tileSize to check
	 * 			| tileSize
	 * @return (tileSize > 0)
	 */
	private boolean isValidTileSize(int tileSize){
		return tileSize > 0;
	}
	/**
	 * returns true if the given number of tiles nbTiles is valid (greater than 0)
	 * @param the given nbTiles to check
	 * 			| nbTiles
	 * @return (nbTiles > 0)
	 */
	
	private boolean isValidNbTiles(int nbTiles){
		return nbTiles > 0;
	}
	/**
	 * returns true if the given visible window is valid
	 * @param visiblewindowWidth
	 * 			the width of the visible window
	 * @param visibleWindowHeight
	 * 			the height of the visible window
	 * @param tileSize
	 * 			the size of the tiles in the world
	 * @param nbTilesX
	 * 			the number of horizontal tiles
	 * @param nbTilesY
	 * 			the number of vertical tiles
	 * @return ((visiblewindowWidth <=  tileSize * nbTilesX) && (visibleWindowHeight
	 *			<=  tileSize * nbTilesY) && visiblewindowWidth > 0 && visibleWindowHeight > 0))
	 */
	@Raw
	private boolean isValidVisibleWindow(int visiblewindowWidth,int visibleWindowHeight,
				int tileSize, int nbTilesX, int nbTilesY){
		return  ((visiblewindowWidth <=  tileSize * nbTilesX) && (visibleWindowHeight
				<=  tileSize * nbTilesY) && visiblewindowWidth > 0 && visibleWindowHeight > 0);
	}
	/**
	 * returns true if the given coordinate of the bottom left pixel is valid
	 * @param pixelX
	 * 			the horizontal position
	 * @param pixelY
	 * 			the vertical position
	 * @return ((pixelX % this.getTileLength() == 0) && (pixelY % this.getTileLength() == 0))
	 */
	@Raw
	private boolean isValidBottomLeftPixel(int pixelX, int pixelY) {
		return ((pixelX % this.getTileLength() == 0) && (pixelY % this.getTileLength() == 0));
	}
	/**
	 * returns true if there are no more than 100 game objects that are not a Mazub
	 * @return (getNbPlants() + getNbSharks() + getNbSlimes() <= 100) 
	 */
	private boolean isValidAmountOfCharacters(int amount) {
		return amount <= 100;
	}
	/**
	 * returns true if the given target tile is valid
	 * @param x
	 * 			the horizontal position of the tile
	 * @param y
	 * 			the vertical position of the tile
	 * @param nbTilesX
	 * 			the horizontal number of tiles in world
	 * @param nbTilesY
	 * 			the vertical number of tiles in world
	 * @return True if x and y are zero or positive and smaller than the availeble
	 * 			number of tiles in world
	 * 			| (x >= 0 && y >= 0 && x <= nbTilesX - 1 && y <= nbTilesY - 1)
	 */
	private boolean isValidTargetTile(int x, int y, int nbTilesX, int nbTilesY) {
		return (x >= 0 && y >= 0 && x <= nbTilesX - 1 && y <= nbTilesY - 1); 
	}
	/**
	 * returns true if the given tile is valid
	 * @param tileX
	 * 			the horizontal position of the tile
	 * @param tileY
	 * 			the vertical position of the tile
	 * @param tileType
	 * 			the type of geological feature this tile possesses
	 * @return ((tileX < getNbTilesX()) && (tileY < getNbTilesY())
				&& (tileType >= 0) && (tileType <= 4))
	 */
	private boolean isValidTile(int tileX, int tileY, int tileType) {
		return (tileX < this.getNbTilesX()) && (tileY < this.getNbTilesY())
				&& (tileType >= 0) && (tileType <= 4);
	}	
	/**
	 * Checks if dt has a proper value between 0 and 0.2.
	 * @param dt
	 * 			the time interval to check
	 * @return True if dt is a value between 0 and 0.2 otherwise false.
	 * 		| (dt <= 0.2 && dt > 0)
	 */
	protected boolean isValidDt(double dt) {
		return ( dt <= 0.2 && dt > 0);
	}	
	/**
	 * Starts the game that is played in the given world.
	 * After this method has been invoked, no further game objects will be added
	 * via {@link IFacadePart2#addPlant(World, Plant)},
	 * {@link IFacadePart2#addShark(World, Shark)},
	 * {@link IFacadePart2#addSlime(World, Slime)}, or
	 * {@link IFacadePart2#setMazub(World, Mazub)}), and no geological features
	 * will be changed via
	 * {@link IFacadePart2#setGeologicalFeature(World, int, int, int)}.
	 * 
	 * 		| this.setGameStarted(true);
	 */
	public void startGame() {
		this.setGameStarted(true);
	}
	
	/**
	 * Returns whether the game, played in the given game world, is over.
	 * The game is over when Mazub has died, or has reached the target tile.
	 * 
	 * @return true if the game is over, false otherwise.
	 * 			| (getAlien == null || didPlayerWint())
	 */
	public boolean isGameOver() {
		return (this.getAlien() == null || this.didPlayerWin());
	}
	
	/**
	 * Returns whether the game played in the given world has finished and the
	 * player has won. The player wins when Mazub has reached the target tile.
	 * 
	 * @return true if the game is over and the player has won, false otherwise.
	 * 			| if (getAlien != null)
	 * 			| 	then for each tile in getTilePositionsIn(alien.getXPos(), alien.getYPos(),
	 * 			|							alien.getXPos() + alien.getXDim()
	 * 			|							alien.getYPos() + alien.getYDim()
	 * 			|			if (tile[0] == getTargetTileX() && tile[1] == getTargetTileY())
	 * 			|				then return true
	 * 			| else 
	 * 			| 	then return false
	 */
	public boolean didPlayerWin() {
		if (this.getAlien() != null) {
			for (int[] tile: this.getTilePositionsIn( (int) this.getAlien().getXPos(), 
					(int) this.getAlien().getYPos(), (int) this.getAlien().getXPos() + this.getAlien().getXDim(),
					(int) this.getAlien().getYPos() + this.getAlien().getYDim())) {
				if (tile[0] == this.getTargetTileX() && tile[1] == this.getTargetTileY()) {
					return true;
				}
			}
		}		
		return false;
	}
	
	/**
	 * calculates the dt for every object in the game world
	 * the maximal value for dt is 0.2
	 * @return the minimal value for dt
	 * no documentation is needed because this is directly part of advanceTime
	 */
	private double computeMinimalDt(double dt) {
		double dtGiven = dt;
		for (Plant plant : this.getPlants()) {
			if (plant.computeDt(dtGiven) < dt) {
				dt = plant.computeDt(dtGiven);				
			}			 
		}
		for (Shark shark: this.getSharks()) {
			if (shark.computeDt(dtGiven) < dt) {
				dt = shark.computeDt(dtGiven);			
			}		
		}
		for (Slime slime: this.getSlimes()) {
			if (slime.computeDt(dtGiven) < dt) {
				dt = slime.computeDt(dtGiven);			
			}		
		}
		if (this.getBuzam() != null) {
			if (this.getBuzam().computeDt(dtGiven) < dt) {
				dt = this.getBuzam().computeDt(dtGiven);
			}
		}
		if (this.getAlien() != null) {
			if (this.getAlien().computeDt(dtGiven) < dt) {
				dt = this.getAlien().computeDt(dtGiven);
			}
		}	
		return dt;
	}
	
	/**
	 * no documentation is needed because this is directly part of advanceTime
	 * @param dt
	 * @throws IllegalDtException
	 */
	private void advanceEveryGameObject(double dt) throws IllegalDtException {
		if (this.getAlien() != null) {
			for (Plant plant : this.getPlants()) {
				 plant.advanceTime(dt);
			}
			for (Shark shark: this.getSharks()) {
				shark.advanceTime(dt);
			}
			for (Slime slime: this.getSlimes()) {
				slime.advanceTime(dt);
			}
			if ( (this.getBuzam() != null) || ( ! this.getBuzam().isDying())) {
				this.getBuzam().advanceTime(dt);
			}
			this.getAlien().advanceTime(dt);
			
			positioningVisibleWindow();
		}
	}
	
	/**
	 * NO DOCUMENTATION MUST BE WORKED OUT
	 * @throws IllegalDtException 
	 */
	public void advanceTime(double dt) throws IllegalDtException {
		if( ! isValidDt(dt)) {
			throw new IllegalDtException(dt);
		}
		if( ! isGameStarted()) {
			this.startGame();
		}
		for (GameObject object: this.listAllGameObjects()) {
			if (object.getProgram() != null) {
				object.getProgram().execute(dt);
			}
		}

		double minDt = computeMinimalDt(dt);
		double timePassed = 0;
		if (minDt < dt) {
			for (timePassed = 0; timePassed < (dt - minDt); timePassed += minDt) {
				advanceEveryGameObject(minDt);
			}
		}
		if (dt - timePassed > 0)
			advanceEveryGameObject(dt - timePassed);
	}
	
	
	/**
	 * positions the visible window of the game world as Mazub is moving
	 * @effect 
	 * 			| if (getAlien != null)
	 * 			| 	then ... (see next @effect's)
	 * @effect positions the visible window in the horizontal direction
	 * 			| if (alien.getLocation[0] < 200) 
	 * 			| 	then setXVisibleWindow(0)
	 * 			| else if (alien.getLocation[0] + alien.getSize()[0] > getX() - 200)
	 * 			| 	then setXVisibleWindow(getX() - getVisibleWindowWidth())
	 * 			| else if (alien.getLocation()[0] - 200 < getXVisibleWindow())
	 * 			| 	then setXVisibleWindow(alien.getLocation[0] - 200)
	 * 			| else if (alien.getLocation()[0] + alien.getSize()[0] +200 
	 * 			| 			> getXVisibleWindow() + getVisibleWindowWidth())
	 * 			| 	then setXVisibleWindow(alien.getLocation()[0] + alien.getSize()[0]
	 * 			|							- getVisibleWindowWidth() + 200)
	 * @effect positions the visible window in the vertical direction
	 * 			| if (alien.getLocation[1] < 200) 
	 * 			| 	then setYVisibleWindow(0)
	 * 			| else if (alien.getLocation[1] + alien.getSize()[1] > getY() - 200)
	 * 			| 	then setYVisibleWindow(getY() - getVisibleWindowHeight())
	 * 			| else if (alien.getLocation()[1] - 200 < getYVisibleWindow())
	 * 			| 	then setYVisibleWindow(alien.getLocation[0] - 200)
	 * 			| else if (alien.getLocation()[1] + alien.getSize()[1] +200 
	 * 			| 			> getYVisibleWindow() + getVisibleWindowHeight())
	 * 			| 	then setYVisibleWindow(alien.getLocation()[1] + alien.getSize()[1]
	 * 			|							- getVisibleWindowHeight() + 200)
	 */
	private void positioningVisibleWindow() {
		if (this.getAlien() != null) {
			//x
			if (this.getAlien().getLocation()[0] < 200) {
				this.setXVisibleWindow(0);
			}
			else if (this.getAlien().getLocation()[0] + this.getAlien().getSize()[0] > this.getX() - 200) {
				this.setXVisibleWindow(this.getX() - this.getVisibleWindowWidth());
			}
			else if (this.getAlien().getLocation()[0] - 200 < this.getXVisibleWindow()) {
				this.setXVisibleWindow(this.getAlien().getLocation()[0] - 200);
			}
			else if (this.getAlien().getLocation()[0] + this.getAlien().getSize()[0] + 200 >
					this.getXVisibleWindow() + this.getVisibleWindowWidth()){
				this.setXVisibleWindow(this.getAlien().getLocation()[0] + this.getAlien().getSize()[0]
									- this.getVisibleWindowWidth() + 200);
			}
			//y
			if (this.getAlien().getLocation()[1] < 200) {
				this.setYVisibleWindow(0);
			}
			else if (this.getAlien().getLocation()[1] + this.getAlien().getSize()[1] > this.getY() - 200) {
				this.setYVisibleWindow(this.getY() - this.getVisibleWindowHeight());
			}
			else if (this.getAlien().getLocation()[1] - 200 < this.getYVisibleWindow()) {
				this.setYVisibleWindow(this.getAlien().getLocation()[1] - 200);
			}
			else if (this.getAlien().getLocation()[1] + this.getAlien().getSize()[1] + 200 >
					this.getYVisibleWindow() + this.getVisibleWindowHeight()){
				this.setYVisibleWindow(this.getAlien().getLocation()[1] + this.getAlien().getSize()[1]
									- this.getVisibleWindowHeight() + 200);
			}
		}	
	}
	
}
