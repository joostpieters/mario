package jumpingalien.part3.tests;

import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.*;
import static org.junit.Assume.assumeTrue;


import jumpingalien.model.Mazub;
import jumpingalien.model.Orientation;
import jumpingalien.model.Plant;
import jumpingalien.model.Shark;
import jumpingalien.model.Type;
import jumpingalien.model.World;
import jumpingalien.model.program.Program;
import jumpingalien.part3.facade.Facade;
import jumpingalien.part3.facade.IFacadePart3;
import jumpingalien.part3.programs.ParseOutcome;
import jumpingalien.util.ModelException;
import jumpingalien.util.Sprite;

import org.junit.Before;
import org.junit.Test;

public class StatementTest {
	
	public static final int FEATURE_AIR = 0;
	public static final int FEATURE_SOLID = 1;
	public static final int FEATURE_WATER = 2;
	public static final int FEATURE_MAGMA = 3;
	
	private IFacadePart3 facade;
	private World world;
	private Mazub alien;
	Sprite[] sprites;
	Sprite[] sprites2;
	
	
	@Before
	public void createFacadeAndWorld() {
		facade = new Facade();
		world = facade.createWorld(500, 2, 2, 2, 2, 1, 1);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		int m = 10;
		sprites = spriteArrayForSize(2, 2, 10 + 2 * m);
		sprites2 = spriteArrayForSize(2, 2, 2);
		alien = facade.createMazub(0, 499, sprites);
		facade.setMazub(world, alien);
	}
	
	@Test
	public void forEach() {
		ParseOutcome<?> outcome = facade.parse("object o; foreach (any, o) where (isshark o) "
				+ "sort getx o descending do print getx o; done");
		Program program = (Program) outcome.getResult();
		Plant plant1 = facade.createPlantWithProgram(0, 0, spriteArrayForSize(3, 3, 2), program);
		Plant plant2 = facade.createPlant(10, 0, spriteArrayForSize(3, 3, 2));
		Plant plant3 = facade.createPlant(20, 0, spriteArrayForSize(3, 3, 2));
		Mazub mazub = facade.createMazub(100, 100, spriteArrayForSize(3, 3));
		Shark shark = facade.createShark(200, 0, spriteArrayForSize(3, 3, 2));
		Shark shark2 = facade.createShark(250, 0, spriteArrayForSize(3, 3, 2));
		Shark shark3 = facade.createShark(300, 0, spriteArrayForSize(3, 3, 2));
		World world = facade.createWorld(500, 2, 2, 2, 2, 1, 1);
		facade.addPlant(world, plant1);
		facade.addPlant(world, plant2);
		facade.addPlant(world, plant3);
		facade.setMazub(world, mazub);
		facade.addShark(world, shark3);
		facade.addShark(world, shark2);
		facade.addShark(world, shark);
		program.execute(0.1);
	}
	
	@Test
	public void ForEachIllegalSort() {
		try {
		ParseOutcome<?> outcome = facade.parse("object o; foreach (any, o) where "
				+ "5 sort getx o descending do print getx o; done");
		System.out.println(outcome.getResult());
		} catch (IllegalArgumentException exc) {
			assert true;
		}
	}
	
	@Test
	public void IfStatementTest() {
		ParseOutcome<?> outcome = facade.parse("object o; foreach (any, o) where (isplant o) "
				+ "sort getx o descending do if (isplant o) then print getx o; done");
		Program program = (Program) outcome.getResult();
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(3, 3, 2), program);
		facade.addPlant(world, plant);
		program.execute(0.1);
		assertEquals(((plant.getOrientation() == Orientation.RIGHT) && (plant.getXSpeed() != 0)), true);
	}
	
	
}
