package jumpingalien.part2.tests;

import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.assertEquals;

import java.util.concurrent.CopyOnWriteArrayList;

import jumpingalien.model.Mazub;
import jumpingalien.model.School;
import jumpingalien.model.Slime;
import jumpingalien.model.World;
import jumpingalien.part2.facade.Facade;
import jumpingalien.part2.facade.IFacadePart2;
import jumpingalien.util.ModelException;

import org.junit.Test;

public class SlimeTest {
	
	public static final int FEATURE_AIR = 0;
	public static final int FEATURE_SOLID = 1;
	public static final int FEATURE_WATER = 2;
	public static final int FEATURE_MAGMA = 3;

	@Test(expected = ModelException.class)
	@SuppressWarnings("unused")
	public void testNegativePosition() {
		IFacadePart2 facade = new Facade();
		School school = facade.createSchool();
		Slime slime = facade.createSlime(-5, -20, spriteArrayForSize(1, 1, 2), school);
	}
	
	@Test(expected = ModelException.class)
	public void testTooBigPosition() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(50, 3, 3, 1, 1, 1, 1);
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 500, spriteArrayForSize(1, 1, 2), school);
		facade.addSlime(world, slime);
	}
	
	
	
	@Test(expected = ModelException.class)
	@SuppressWarnings("unused")
	public void testSpriteTooShort() {
		IFacadePart2 facade = new Facade();
		School school = facade.createSchool();
		Slime slime = facade.createSlime(0, 0, spriteArrayForSize(1, 1, 1), school);
	}
	
	@Test(expected = ModelException.class)
	@SuppressWarnings("unused")
	public void testSpriteTooLong() {
		IFacadePart2 facade = new Facade();
		School school = facade.createSchool();
		Slime slime = facade.createSlime(0, 0, spriteArrayForSize(1, 1, 3), school);
	}
	
	@Test(expected = ModelException.class)
	@SuppressWarnings("unused")
	public void testNullSchool() {
		IFacadePart2 facade = new Facade();
		Slime slime = facade.createSlime(0, 0, spriteArrayForSize(1, 1, 3), null);
	}
	
	@Test 
	public void testLoseHitpoints() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		School school = facade.createSchool();
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Slime slime = facade.createSlime(3, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		alien.startMoveRight();
		facade.advanceTime(world, 0.1);
		// Mazub has hit the slime so the slime loses 50 hitpoints
		assertEquals(slime.getHitpoints(), 50);
	}
	
	@Test 
	public void testIsImmune() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		School school = facade.createSchool();
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Slime slime = facade.createSlime(3, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		alien.startMoveRight();
		facade.advanceTime(world, 0.1);
		// Mazub has hit the slime so the slime get Immune
		assertEquals(slime.isImmune(), true);
	}
	
	@Test 
	public void testDie() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(50, 5, 5, 1, 1, 2, 2);
		// s a s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);	
		School school = facade.createSchool();
		Mazub alien = facade.createMazub(50, 51, spriteArrayForSize(50, 3));
		Slime slime = facade.createSlime(50, 49, spriteArrayForSize(50, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		alien.startMoveRight();
		for (int i = 0; i < 7; i++) {
			facade.advanceTime(world, 0.1);
		}
		// Mazub has hit the slime twice, so the slime should have zero hitpoints after 0.7 second
		assertEquals(slime.getHitpoints(), 0);
	}

		
	@Test 
	public void testShortInWater() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s w s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_WATER);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 1; i++) {
			facade.advanceTime(world, 0.1);
		}		
		//0.1 second, so the slime does not lose hitpoints
		assertEquals(slime.getHitpoints(), 100);
		assertEquals(facade.getSchool(slime), school);
	}
	
	@Test 
	public void testLongInWater() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s w s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_WATER);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 5; i++) {
			facade.advanceTime(world, 0.1);
		}
		// 0.5 seconds in water, so the slimes loses 2 * 2 hitpoints
		assertEquals(slime.getHitpoints(), 96);
	}
	@Test 
	public void testDieInWater() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s w s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_WATER);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 102; i++) {
			facade.advanceTime(world, 0.1);
		}
		// 10.2 seconds in water, so the slimes loses 50 * 2 hitpoints, he is dead now
		// but still in the world
		for (Slime deadSlime: world.getSlimes()) {
			assertEquals(deadSlime.getHitpoints(), 0);
		}
	}
	
	@Test 
	public void testRemoveAfterDeath() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s w s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_WATER);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 108; i++) {
			facade.advanceTime(world, 0.1);
		}
		// 10.8 seconds in water, the slime dies and is removed after 0.6 seconds, so no part anymore of world
		assertEquals(world.getSlimes(),  new CopyOnWriteArrayList<Slime>());
	}
	@Test 
	public void testShortInMagma() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s m s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_MAGMA);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 1; i++) {
			facade.advanceTime(world, 0.1);
		}		
		//0.1 second in magma, so the slime loses 50 hitpoints
		assertEquals(slime.getHitpoints(), 50);
	}
	
	@Test 
	public void testLongInMagma() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		// s m s
		// a s a
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 2, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 0, 1, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 1, FEATURE_MAGMA);		
		Mazub alien = facade.createMazub(0, 999, spriteArrayForSize(50, 3));
		School school = facade.createSchool();
		Slime slime = facade.createSlime(500, 499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
		for (int i = 0; i < 4; i++) {
			facade.advanceTime(world, 0.10001);
		}
		// 0.40004 seconds in magma, so the slime loses 2 * 50 hitpoints
		assertEquals(slime.getHitpoints(), 0);
	}
	
	@Test(expected = ModelException.class)
	public void testFacadeInvalidPos() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		School school = facade.createSchool();
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Slime slime = facade.createSlime(-3, -499, spriteArrayForSize(3, 3, 2), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
	}
	
	@Test(expected = ModelException.class)
	public void testFacadeInvalidSprite() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		School school = facade.createSchool();
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Slime slime = facade.createSlime(3, 499, spriteArrayForSize(1, 1, 1), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
	}
	
	@Test(expected = ModelException.class)
	public void testFacadeInvalidSchool() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		School school = null;
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		Slime slime = facade.createSlime(3, 499, spriteArrayForSize(3, 3, 3), school);
		facade.setMazub(world, alien);
		facade.addSlime(world, slime);
	}
	
	@Test
	public void testFacadeGetSlimes() {
		IFacadePart2 facade = new Facade();
		World world = facade.createWorld(500, 3, 3, 1, 1, 2, 2);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		Mazub alien = facade.createMazub(0, 499, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		assertEquals(facade.getSlimes(world).size(), 0);
	}

	
}
