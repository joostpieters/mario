package jumpingalien.part3.tests;

import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.*;

import java.util.HashMap;
import java.util.Map;

import jumpingalien.model.Buzam;
import jumpingalien.model.Mazub;
import jumpingalien.model.Orientation;
import jumpingalien.model.Plant;
import jumpingalien.model.School;
import jumpingalien.model.Shark;
import jumpingalien.model.Slime;
import jumpingalien.model.Type;
import jumpingalien.model.World;
import jumpingalien.model.exceptions.IllegalPositionException;
import jumpingalien.model.exceptions.IllegalSchoolException;
import jumpingalien.model.exceptions.IllegalSettingException;
import jumpingalien.model.exceptions.IllegalSpriteException;
import jumpingalien.model.exceptions.IllegalTileException;
import jumpingalien.model.program.Program;
import jumpingalien.model.program.expression.BoolFalse;
import jumpingalien.model.program.expression.BoolTrue;
import jumpingalien.model.program.expression.Constant;
import jumpingalien.model.program.expression.DirectionExpression;
import jumpingalien.model.program.expression.Expression;
import jumpingalien.model.program.expression.GetHeightObject;
import jumpingalien.model.program.expression.GetHpObject;
import jumpingalien.model.program.expression.GetTileExpression;
import jumpingalien.model.program.expression.GetWidthObject;
import jumpingalien.model.program.expression.GetX;
import jumpingalien.model.program.expression.GetY;
import jumpingalien.model.program.expression.IsAir;
import jumpingalien.model.program.expression.IsDead;
import jumpingalien.model.program.expression.IsDucking;
import jumpingalien.model.program.expression.IsJumping;
import jumpingalien.model.program.expression.IsMagma;
import jumpingalien.model.program.expression.IsMazub;
import jumpingalien.model.program.expression.IsMoving;
import jumpingalien.model.program.expression.IsPassable;
import jumpingalien.model.program.expression.IsPlant;
import jumpingalien.model.program.expression.IsShark;
import jumpingalien.model.program.expression.IsSlime;
import jumpingalien.model.program.expression.IsTerrain;
import jumpingalien.model.program.expression.IsWater;
import jumpingalien.model.program.expression.NotBool;
import jumpingalien.model.program.expression.ObjectNull;
import jumpingalien.model.program.expression.ObjectSelf;
import jumpingalien.model.program.expression.RandomDouble;
import jumpingalien.model.program.expression.ReadVariable;
import jumpingalien.model.program.expression.SearchObject;
import jumpingalien.model.program.expression.SqrtDouble;
import jumpingalien.model.program.statement.PrintStatement;
import jumpingalien.model.program.statement.Statement;
import jumpingalien.part3.facade.Facade;
import jumpingalien.part3.facade.IFacadePart3;
import jumpingalien.part3.programs.ParseOutcome;
import jumpingalien.part3.programs.IProgramFactory.Direction;
import jumpingalien.util.Sprite;

import org.junit.Test;

@SuppressWarnings({"unchecked", "rawtypes"})
public class UnaryExpressionTest {
	
	public static final int FEATURE_AIR = 0;
	public static final int FEATURE_SOLID = 1;
	public static final int FEATURE_WATER = 2;
	public static final int FEATURE_MAGMA = 3;
	
	@Test
	public void testRandomDouble() {
		Expression expr1 = new Constant(10);
		Expression random = new RandomDouble(expr1);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(random);
		Program program = new Program(stat, map);
		assertEquals((((Double)random.evaluate(program)) < 10 && ((Double) random.evaluate(program) > 0.0)) , true);			
	}
	
	@Test
	public void testObjectSelf() throws IllegalPositionException, IllegalSpriteException {
		Expression obj = new ObjectSelf();
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(obj.evaluate(program), buzam);			
	}
	
	@Test
	public void testBoolFalse() {
		Expression bool = new BoolFalse();
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(bool);
		Program program = new Program(stat, map);
		assertEquals(bool.evaluate(program), false);	
	}
	
	@Test
	public void testBoolTrue() {
		Expression bool = new BoolTrue();
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(bool);
		Program program = new Program(stat, map);
		assertEquals(bool.evaluate(program), true);	
	}
	
	@Test
	public void testConstant() {
		Expression constant = new Constant(5);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(constant);
		Program program = new Program(stat, map);
		assertEquals(constant.evaluate(program), 5.0);	
	}
	
	@Test
	public void testDirectionExpression() {
		Expression direc = new DirectionExpression(Direction.DOWN);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(direc);
		Program program = new Program(stat, map);
		assertEquals(direc.evaluate(program), Direction.DOWN);
	}
	
	@Test
	public void testObjectNull() {
		Expression obj = new ObjectNull();
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		assertEquals(obj.evaluate(program), null);	
	}
	
	@Test
	public void testHeightObject() throws IllegalPositionException, IllegalSpriteException {
		Expression obj = new ObjectSelf();
		Expression getHeight = new GetHeightObject(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(getHeight);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(getHeight.evaluate(program), (double) buzam.getYDim());	
	}
	
	@Test
	public void testWidthObject() throws IllegalPositionException, IllegalSpriteException {
		Expression obj = new ObjectSelf();
		Expression getWidth = new GetWidthObject(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(getWidth);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(getWidth.evaluate(program), (double) buzam.getXDim());	
	}
	
	@Test
	public void testSearchObjectLeft() {
		IFacadePart3 facade = new Facade();
		Expression direc = new DirectionExpression(Direction.LEFT);
		Expression obj = new SearchObject(direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		// there are no game objects in the world
		Mazub alien = facade.createMazub(100, 100, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlantWithProgram(105, 100, spriteArrayForSize(3, 3, 2), program);
		program.setGameObject(plant);
		World world = facade.createWorld(500,2,2,2,2,1,1);
		facade.addPlant(world, plant);
		facade.setMazub(world, alien);
		assertEquals(obj.evaluate(program), alien);	
	}	
	
	@Test
	public void testSearchObjectRight() {
		IFacadePart3 facade = new Facade();
		Expression direc = new DirectionExpression(Direction.RIGHT);
		Expression obj = new SearchObject(direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		// there are no game objects in the world
		Mazub alien = facade.createMazub(100, 100, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlantWithProgram(90, 100, spriteArrayForSize(3, 3, 2), program);
		program.setGameObject(plant);
		World world = facade.createWorld(500,2,2,2,2,1,1);
		facade.addPlant(world, plant);
		facade.setMazub(world, alien);
		assertEquals(obj.evaluate(program), alien);	
	}
	
	@Test
	public void testSearchObjectUp() {
		IFacadePart3 facade = new Facade();
		Expression direc = new DirectionExpression(Direction.UP);
		Expression obj = new SearchObject(direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		// there are no game objects in the world
		Mazub alien = facade.createMazub(100, 100, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlantWithProgram(100, 90, spriteArrayForSize(3, 3, 2), program);
		program.setGameObject(plant);
		World world = facade.createWorld(500,2,2,2,2,1,1);
		facade.addPlant(world, plant);
		facade.setMazub(world, alien);
		assertEquals(obj.evaluate(program), alien);	
	}
	
	@Test
	public void testSearchObjectDown() {
		IFacadePart3 facade = new Facade();
		Expression direc = new DirectionExpression(Direction.DOWN);
		Expression obj = new SearchObject(direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		// there are no game objects in the world
		Mazub alien = facade.createMazub(100, 100, spriteArrayForSize(3, 3));
		Plant plant = facade.createPlantWithProgram(100, 110, spriteArrayForSize(3, 3, 2), program);
		program.setGameObject(plant);
		World world = facade.createWorld(500,2,2,2,2,1,1);
		facade.addPlant(world, plant);
		facade.setMazub(world, alien);
		assertEquals(obj.evaluate(program), alien);	
	}
	
	@Test
	public void testGetHpObject() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression hitpoints = new GetHpObject(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(hitpoints);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(hitpoints.evaluate(program), (double) buzam.getHitpoints());	
	}
	
	@Test
	public void testGetX() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression x = new GetX(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(x);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(x.evaluate(program), (double) buzam.getXPos());	
	}
	
	@Test
	public void testGetY() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression y = new GetY(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(y);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(y.evaluate(program), (double) buzam.getYPos());	
	}
	
	@Test
	public void testIsBuzamJumping() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression isjumping = new IsJumping(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isjumping);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(isjumping.evaluate(program), buzam.isJumping());	
	}
	
	@Test
	public void testIsSharkJumping() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression isjumping = new IsJumping(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isjumping);
		Program program = new Program(stat, map);
		Shark shark= new Shark(20, 30, spriteArrayForSize(3, 3, 2));
		program.setGameObject(shark);
		assertEquals(isjumping.evaluate(program), shark.isJumping());	
	}
	
	@Test(expected = IllegalArgumentException.class)
	public void testIsJumping() throws IllegalPositionException, IllegalSpriteException {
		IFacadePart3 facade = new Facade();
		Expression obj = new ObjectSelf();
		Expression isjumping = new IsJumping(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isjumping);
		Program program = new Program(stat, map);
		facade.createPlantWithProgram(0, 0, spriteArrayForSize(3, 3, 2), program);
		isjumping.evaluate(program);
	}
	
	@Test
	public void testIsMovingLeft() throws IllegalPositionException, IllegalSpriteException {		
		IFacadePart3 facade = new Facade();
		Expression obj = new ObjectSelf();
		Expression direc = new DirectionExpression(Direction.LEFT);
		Expression ismoving = new IsMoving(obj, direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismoving);
		Program program = new Program(stat, map);
		Buzam buzam = facade.createBuzam(0, 0, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		buzam.startMoveLeft();
		assertTrue(buzam.getOrientation() == Orientation.LEFT);
		assertTrue((Boolean) ismoving.evaluate(program));
		buzam.stopMovingX();
		assertFalse((Boolean) ismoving.evaluate(program));
	}
	
	@Test
	public void testIsMovingRight() throws IllegalPositionException, IllegalSpriteException {		
		IFacadePart3 facade = new Facade();
		Expression obj = new ObjectSelf();
		Expression direc = new DirectionExpression(Direction.RIGHT);
		Expression ismoving = new IsMoving(obj, direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismoving);
		Program program = new Program(stat, map);
		Buzam buzam = facade.createBuzam(0, 0, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		buzam.startMoveRight();
		assertTrue(buzam.getOrientation() == Orientation.RIGHT);
		assertTrue((Boolean) ismoving.evaluate(program));
		buzam.stopMovingX();
		assertFalse((Boolean) ismoving.evaluate(program));
	}
	
	@Test
	public void testIsMovingUp() throws IllegalPositionException, IllegalSpriteException {		
		IFacadePart3 facade = new Facade();
		Expression obj = new ObjectSelf();
		Expression direc = new DirectionExpression(Direction.UP);
		Expression ismoving = new IsMoving(obj, direc);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismoving);
		Program program = new Program(stat, map);
		Buzam buzam = facade.createBuzam(0, 0, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		buzam.startJump();
		assertTrue((Boolean) ismoving.evaluate(program));
		buzam.endJump();
		assertFalse((Boolean) ismoving.evaluate(program));
	}
	
	@Test
	public void testIsDucking() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression isducking = new IsDucking(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isducking);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(isducking.evaluate(program), buzam.isDucked());	
	}	
	
	@Test
	public void testIsNotDead() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression isdead = new IsDead(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isdead);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(isdead.evaluate(program), false);	
	}
	
	@Test
	public void testIsMazub() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		// buzam instance of mazub
		Expression ismazub = new IsMazub(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismazub);
		Program program = new Program(stat, map);
		Buzam buzam = new Buzam(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(buzam);
		assertEquals(ismazub.evaluate(program), true);	
	}
	
	@Test
	public void testIsMazubFalse() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression ismazub = new IsMazub(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismazub);
		Program program = new Program(stat, map);
		Shark shark = new Shark(20, 30, spriteArrayForSize(1, 1, 2));
		program.setGameObject(shark);
		assertEquals(ismazub.evaluate(program), false);	
	}
	
	@Test
	public void testIsShark() throws IllegalPositionException, IllegalSpriteException {		
		Expression obj = new ObjectSelf();
		Expression isshark = new IsShark(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isshark);
		Program program = new Program(stat, map);
		Shark shark = new Shark(20, 30, spriteArrayForSize(1, 1, 2));
		program.setGameObject(shark);
		assertEquals(isshark.evaluate(program), true);	
	}
	
	@Test
	public void testIsSlime() throws IllegalPositionException, IllegalSpriteException, IllegalSchoolException {		
		Expression obj = new ObjectSelf();
		Expression isslime = new IsSlime(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isslime);
		Program program = new Program(stat, map);
		School school = new School();
		Slime slime = new Slime(20, 30, spriteArrayForSize(1, 1, 2), school);
		program.setGameObject(slime);
		assertEquals(isslime.evaluate(program), true);	
	}
	
	@Test
	public void testIsSlimeFalse() throws IllegalPositionException, IllegalSpriteException, IllegalSchoolException {		
		Expression obj = new ObjectSelf();
		Expression isslime = new IsSlime(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isslime);
		Program program = new Program(stat, map);
		Shark gevaarlijke_haai = new Shark(20, 30, spriteArrayForSize(1, 1, 2));
		program.setGameObject(gevaarlijke_haai);
		assertEquals(isslime.evaluate(program), false);	
	}
	
	@Test
	public void testIsPlant() throws IllegalPositionException, IllegalSpriteException, IllegalSchoolException {		
		Expression obj = new ObjectSelf();
		Expression isplant = new IsPlant(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isplant);
		Program program = new Program(stat, map);
		Plant plant = new Plant(20, 30, spriteArrayForSize(1, 1, 2));
		program.setGameObject(plant);
		assertEquals(isplant.evaluate(program), true);	
	}
	
	@Test
	public void testIsAir() throws IllegalPositionException, IllegalSpriteException, IllegalSettingException, IllegalTileException {	
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 5, 15, 1, 1, 3, 3);
		Expression double1 = new Constant(2);
		Expression double2 = new Constant(2);
		Expression tileExpr = new GetTileExpression(double1, double2);
		Expression isair = new IsAir(tileExpr);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(isair);
		Program program = new Program(stat, map);
		Mazub alien = facade.createMazub(20, 30, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(1, 1, 2), program);
		facade.addPlant(world, plant);
		assertTrue((Boolean) isair.evaluate(program));	
		world.setGeologicalFeature(0, 0, 2);
		assertFalse((Boolean) isair.evaluate(program));	
	}
	
	@Test
	public void testIsMagma() throws IllegalPositionException, IllegalSpriteException, IllegalSettingException, IllegalTileException {	
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 5, 15, 1, 1, 3, 3);
		Expression double1 = new Constant(2);
		Expression double2 = new Constant(2);
		Expression tileExpr = new GetTileExpression(double1, double2);
		Expression ismagma = new IsMagma(tileExpr);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ismagma);
		Program program = new Program(stat, map);
		Mazub alien = facade.createMazub(20, 30, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(1, 1, 2), program);
		facade.addPlant(world, plant);
		assertFalse((Boolean) ismagma.evaluate(program));	
		world.setGeologicalFeature(0, 0, 3);
		assertTrue((Boolean) ismagma.evaluate(program));	
	}
	
	@Test
	public void testIsWater() throws IllegalPositionException, IllegalSpriteException, IllegalSettingException, IllegalTileException {	
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 5, 15, 1, 1, 3, 3);
		Expression double1 = new Constant(2);
		Expression double2 = new Constant(2);
		Expression tileExpr = new GetTileExpression(double1, double2);
		Expression iswater = new IsWater(tileExpr);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(iswater);
		Program program = new Program(stat, map);
		Mazub alien = facade.createMazub(20, 30, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(1, 1, 2), program);
		facade.addPlant(world, plant);
		assertFalse((Boolean) iswater.evaluate(program));	
		world.setGeologicalFeature(0, 0, 2);
		assertTrue((Boolean) iswater.evaluate(program));	
	}
	
	@Test
	public void testIsPassable() throws IllegalPositionException, IllegalSpriteException, IllegalSettingException, IllegalTileException {	
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 5, 15, 1, 1, 3, 3);
		Expression double1 = new Constant(2);
		Expression double2 = new Constant(2);
		Expression tileExpr = new GetTileExpression(double1, double2);
		Expression ispassable = new IsPassable(tileExpr);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(ispassable);
		Program program = new Program(stat, map);
		Mazub alien = facade.createMazub(20, 30, spriteArrayForSize(3, 3));
		facade.setMazub(world, alien);
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(1, 1, 2), program);
		facade.addPlant(world, plant);
		assertTrue((Boolean) ispassable.evaluate(program));	
		world.setGeologicalFeature(0, 0, 1);
		assertFalse((Boolean) ispassable.evaluate(program));	
	}
	
	@Test
	public void testNotBool() {
		Expression truebool = new BoolTrue();
		Expression notbool = new NotBool(truebool);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(notbool);
		Program program = new Program(stat, map);
		assertEquals(notbool.evaluate(program), false);	
	}
	
	@Test
	public void testNotBool2() {
		Expression falsebool = new BoolFalse();
		Expression notbool = new NotBool(falsebool);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(notbool);
		Program program = new Program(stat, map);
		assertEquals(notbool.evaluate(program), true);	
	}
	
	@Test
	public void testSqrtDouble() {
		Expression constant = new Constant(16);
		Expression sqrt = new SqrtDouble(constant);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(sqrt);
		Program program = new Program(stat, map);
		assertEquals(sqrt.evaluate(program), 4.0);	
	}
	
	@Test
	public void testSqrtDouble2() {
		Expression constant = new Constant(43);
		Expression sqrt = new SqrtDouble(constant);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(sqrt);
		Program program = new Program(stat, map);
		assertEquals(sqrt.evaluate(program), Math.sqrt(43));	
	}
	
	@Test
	public void testReadVariable() {
		Expression readvar =  new ReadVariable("var", Type.BOOLEAN);
		Map<String, Type> map = new HashMap<String, Type>();
		map.put("var", Type.BOOLEAN);
		Statement stat = new PrintStatement(readvar);
		Program program = new Program(stat, map);
		program.addToEnvironment("var", true);
		assertEquals(true, readvar.evaluate(program));
	}
	
	@Test(expected=IllegalArgumentException.class)
	public void testIllegalReadVariable() {
		Expression readvar =  new ReadVariable("var", Type.BOOLEAN);
		Map<String, Type> map = new HashMap<String, Type>();
		map.put("var", Type.DIRECTION);
		Statement stat = new PrintStatement(readvar);
		Program program = new Program(stat, map);
		readvar.evaluate(program);
	}
	
	@Test
	public void isNoTerrain() {
		Expression obj =  new ObjectSelf();
		Expression isTerrain = new IsTerrain(obj);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		assertFalse((Boolean) isTerrain.evaluate(program));
	}
	
	@Test
	public void isTerrain() {
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 5, 15, 1, 1, 3, 3);	
		Expression double1 = new Constant(2);
		Expression double2 = new Constant(2);
		Expression tileExpr = new GetTileExpression(double1, double2);
		Expression isTerrain = new IsTerrain(tileExpr);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(tileExpr);
		Program program = new Program(stat, map);
		Plant plant = facade.createPlantWithProgram(0, 0, spriteArrayForSize(1, 1, 2), program);
		facade.addPlant(world, plant);
		assertTrue((Boolean) isTerrain.evaluate(program));
	}
	
	@SuppressWarnings("unused")
	@Test
	public void expressionsWithProgramTest1() {
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 2, 2, 2, 2, 1, 1);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		int m = 10;
		Sprite[] sprites = spriteArrayForSize(2, 2, 10 + 2 * m);
		Mazub alien = facade.createMazub(0, 499, sprites);
		facade.setMazub(world, alien);
		// testing a program with expressions: null, +, -, *, /, sqrt
		ParseOutcome<?> outcome = facade.parse("object o; while (o != null) do "
				+ "print gety self; print getwidth self; print getheight self; done");
		Program program = (Program) outcome.getResult();
		Buzam buzam = facade.createBuzamWithProgram(0, 0, sprites, program);
		program.execute(0.004);
	}
	
	@SuppressWarnings("unused")
	@Test
	public void expressionsWithProgramTest2() {
		IFacadePart3 facade = new Facade();
		World world = facade.createWorld(500, 2, 2, 2, 2, 1, 1);
		facade.setGeologicalFeature(world, 0, 0, FEATURE_SOLID);
		facade.setGeologicalFeature(world, 1, 0, FEATURE_SOLID);
		int m = 10;
		Sprite[] sprites = spriteArrayForSize(2, 2, 10 + 2 * m);
		Mazub alien = facade.createMazub(0, 499, sprites);
		facade.setMazub(world, alien);
		// testing a program with expressions: null, +, -, *, /, sqrt
		ParseOutcome<?> outcome = facade.parse("object o;"
				+ "if ((isslime self) || (isdead self) || (ismoving (self, left)) || (isducking self) || (isjumping self)"
				+ " || isterrain self || ispassable self || ismagma self || isair self))"
				+ "then print gety self; fi");
		Program program = (Program) outcome.getResult();
		Buzam buzam = facade.createBuzamWithProgram(0, 0, sprites, program);
		program.execute(0.004);
	}
	
	
	
}
