package jumpingalien.part3.tests;

import static jumpingalien.tests.util.TestUtils.spriteArrayForSize;
import static org.junit.Assert.assertEquals;

import java.util.HashMap;
import java.util.Map;

import jumpingalien.model.Mazub;
import jumpingalien.model.Type;
import jumpingalien.model.exceptions.IllegalPositionException;
import jumpingalien.model.exceptions.IllegalSpriteException;
import jumpingalien.model.program.Program;
import jumpingalien.model.program.expression.Addition;
import jumpingalien.model.program.expression.BoolTrue;
import jumpingalien.model.program.expression.Constant;
import jumpingalien.model.program.expression.Expression;
import jumpingalien.model.program.expression.ObjectSelf;
import jumpingalien.model.program.expression.RandomDouble;
import jumpingalien.model.program.statement.PrintStatement;
import jumpingalien.model.program.statement.Statement;

import org.junit.Test;

@SuppressWarnings({"unchecked", "rawtypes"})
public class UnaryExpressionTest {
	
	@Test
	public void testRandomDouble() {
		Expression expr1 = new Constant(10);
		Expression random = new RandomDouble(expr1);
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(random);
		Program program = new Program(stat, map);
		assertEquals((((Double)random.evaluate(program)) < 10 && ((Double) random.evaluate(program) > 0.0)) , true);			
	}
	
	@Test
	public void testObjectSelf() throws IllegalPositionException, IllegalSpriteException {
		Expression obj = new ObjectSelf();
		Map<String, Type> map = new HashMap<String, Type>();
		Statement stat = new PrintStatement(obj);
		Program program = new Program(stat, map);
		Mazub alien = new Mazub(20, 30, spriteArrayForSize(3, 3));
		program.setGameObject(alien);
		assertEquals(obj.evaluate(program), alien);			
	}
	
	
}
