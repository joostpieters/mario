/**
 * A class that describes the movement of the rectangular player
 * character Mazub in a game world. 
 * 
 * @invar The lowest left corner (x_pos,y_pos) has to stay
 * 			in the game world.
 * 		| isValidPosition(getXPos(), getYPos())
 * @invar The speed has to be limited to a maximum speed
 * 		| isValidSpeed(getSpeed())
 * @author Pieter Van den Berghe, Ward Romanus
 */
public class Mazub {
	
	/**
	 * Initialize this new Mazub with given x and y positions and given dimensions.
	 * 
	 * @param x_pos
	 * The x position in the field for the new Mazub
	 * @param y_pos
	 * The y position in the field for the new Mazub
	 * @param x_dim
	 * Number of pixels from the x dimension of the new Mazub
	 * @param y_dim
	 * Number of pixels from the y dimension of the new Mazub
	 * @post the mazub is created at (x_pos,y_pos)
	 * 			| new.getXPos() == x_pos
	 * 			| new.getYPos() == y_pos
	 * 			| new.getXDim() == x_dim
	 * 			| new.getYDim() == y_dim
	 * @throws	IllegalPositionException
	 * 			The given position is not valid for Mazub
	 * 			| !isValidPosition(x_pos,y_pos)
	 * @throws	IllegalDimensionException
	 * 			The given dimension is not valid for Mazub
	 * 			| !isValidDimension(dimension)	
	 */
	public Mazub(int x_pos, int y_pos, int[] dimension)
			throws IllegalPositionException, IllegalDimensionException {
				if(!isValidPosition(x_pos,y_pos))
					throw new IllegalPositionException(x_pos,y_pos);
				if (!isValidDimension(dimension))
					throw new IllegalDimensionException(dimension);
		this.x_pos = x_pos;
		this.y_pos = y_pos;
		this.dimension = dimension;
	}	
	
	/**
	 * Initialize this new Mazub with given x and y positions and given dimensions.
	 * 
	 * @param x_pos
	 * The x position in the field for the new Mazub
	 * @param y_pos
	 * The y position in the field for the new Mazub
	 * @param x_dim
	 * Number of pixels from the x dimension of the new Mazub
	 * @param y_dim
	 * Number of pixels from the y dimension of the new Mazub
	 * @post the mazub is created at (x_pos,y_pos)
	 * 			| new.getXPos() == x_pos
	 * 			| new.getYPos() == y_pos
	 * 			| new.getXDim() == x_dim
	 * 			| new.getYDim() == y_dim
	 * @throws	IllegalPositionException
	 * 			The given position is not valid for Mazub
	 * 			| !isValidPosition(x_pos,y_pos)
	 * @throws	IllegalDimensionException
	 * 			The given dimension is not valid for Mazub
	 * 			| !isValidDimension(dimension)		 
	 * 
	 * The initial velocity will never be changed below 1 m/s so
	 * we don't need an IllegalInitStartSpeedException or a
	 * IllegalMaxSpeedException. 
	 * 
	 */	
	public Mazub(int x_pos, int y_pos, int[] dimension,
			int initStartSpeed,int maxSpeed)
		throws IllegalPositionException, IllegalDimensionException {
			if (!isValidPosition(x_pos,y_pos))
				throw new IllegalPositionException(x_pos,y_pos);
			if (! isValidDimension(dimension))
				throw new IllegalDimensionException(dimension);
			
		this.x_pos = x_pos;
		this.y_pos = y_pos;
		this.dimension = dimension;
		this.initStartSpeed = initStartSpeed;
		this.maxSpeed = maxSpeed;
	}
	
	/**	
	 * commentaar toevoegen
	 */
	/**
	 *  the horizontal position of mazub
	 */
	public int x_pos = 0;
	/**
	 * the vertical position of mazub
	 */
	public int y_pos = 0;
	/**
	 * the orientation of Mazub
	 */
	public String orientation  = "right";
	/**
	 * the width/horizontal size of mazub
	 */
	public int x_dim;
	/**
	 * the height/vertical size of mazub
	 */
	public int y_dim;
	/**
	 * the width of mazub when he's not ducked
	 */
	public int x_dim_not_ducked = 6;
	/**
	 * the height of mazub when he's not ducked
	 */
	public int y_dim_not_ducked = 11;
	/**
	 * the width of mazub when he's ducked
	 */
	public int x_dim_ducked = 4; // nog aanpassen, random waarde
	/**
	 * the height of mazub when he's ducked
	 */
	public int y_dim_ducked = 6; // nog aanpassen, random waarde
	/**
	 * the dimensions of mazub, the set consists of the x_dim
	 * and the y_dim.
	 */
	public int[] dimension;
	/**
	 * the starting speed when startMove is initiated
	 */
	public int initStartSpeed;
	/**
	 * the maximum horizontal speed the mazub can reach
	 */
	public int maxSpeed; 
	/**
	 * the speed of mazub
	 */
	public double speed;
	/**
	 * the speed at time = time + detltaT (for example when 
	 * mazub is accelerating) 
	 */
	public double newSpeed;
	/**
	 * a small time interval, for example the new_speed after 
	 * deltaT seconds is given by speed + deltaT*acc 
	 * (acc =  acceleration)
	 */
	public double deltaT;
	/**
	 * the x position (horizontal position) after deltaT seconds
	 */
	public double new_x_pos;
	/**
	 * the y position (vertical position) after deltaT seconds
	 */
	public double new_y_pos;
	/**
	 * the difference between the new x_position (new_x_pos) and
	 * the previous x_pos (x_pos)
	 */
	public double x_difference;
	/**
	 * the difference between the new y_position (new_y_pos) and
	 * the previous y_pos (y_pos)
	 */
	public double y_difference;
	/**
	 * a boolean saying if the mazub is ducked
	 */
	public boolean duck = false;
	/**
	 * the horizontal acceleration of mazub
	 */
	public double acc;
	/**
	 * the speed of mazub in the vertical direction
	 */
	public double YSpeed;
	/**
	 * the acceleration of mazub in the vertical direction
	 */
	public double YAcc;
	/**
	 * the next 4 int's are the ultimate static values for the borders
	 * of the gamescreen and thus for (x_pos,y_pos)
	 */
	/**
	 * the minimal value for x_pos
	 */
	public static int MIN_X_VALUE = 0;
	/**
	 * the maximal value for x_pos
	 */
	public static int MAX_X_VALUE = 1023;
	/**
	 * the minimal value for y_pos
	 */
	public static int MIN_Y_VALUE = 0;
	/**
	 * the maximal value for y_pos
	 */
	public static int MAX_Y_VALUE = 767;
	/**
	 * the static int giving the starting speed of mazub
	 * when startMove() is initiated
	 */
	public static int START_SPEED = 1;
	/**
	 * the maximal horizontal speed mazub can reach
	 */
	public static int MAX_SPEED = 3;
	/**
	 * the maximal horizontal speed mazub can reach
	 * when mazub is ducked
	 */
	public static int MAX_SPEED_DUCK = 1;
	/**
	 * the vertical speed at which mazub moves when 
	 * startJump() is initiated
	 */
	public static int JUMP_SPEED = 8;
	/**
	 * the vertical acceleration at which mazub falls
	 */
	public static int FALL_ACC = -10;
		
	/**
	 * Returns the x position
	 * 
	 * @return the x position
	 */
	public int getXPos() {
		return x_pos;
	}
	
	/**
	 * Returns the y position
	 * 
	 * @return the y position
	 */
	public int getYPos() {
		return y_pos;
	}
	
	
	/**
	 * Returns the orientation of Mazub
	 * @return the orientation
	 */
	public String getOrientation() {
		return orientation;
	}

	/**
	 * Returns the dimensions
	 * 
	 * @return the dimensions
	 */
	public int[] getDimension() {
		return dimension;
	}
	/**
	 * Returns the horizontal speed
	 * 
	 * @return the horizontal speed
	 */
	public double getSpeed() {
		return speed;
	}

	/**
	 * Returns the horizontal acceleration
	 * 
	 * @return the horizontal acceleration 
	 */
	public double getAcc() {
		return acc;
	}


	/**
	 * Returns the initial start speed
	 * 
	 * @return the initial start speed
	 */
	public int getInitStartSpeed() {
		return initStartSpeed;
	}
	
	/**
	 * Returns the maximum speed
	 * 
	 * @return the maximum speed
	 */
	public int getMaxSpeed() {
		return maxSpeed;
	}
	
	
	/**
	 * 	Checks whether the given positions are valid positions for 
	 *  any Mazub.
	 * 
	 * @param x_pos 
	 * 			the horizontal position of Mazub
	 * @param y_pos
	 * 			the vertical position of Mazub
	 * @return 	True if the horizontal position x_pos and 
	 *			and the vertical position y_pos stay in the 
	 *			game world.
	 *			| return (x_pos >= MIN_X_VALUE && x_pos <= MAX_X_VALUE
	 *				&& y_pos >= MIN_Y_VALUE && y_pos <= MAX_Y_VALUE) 
	 */
	public static boolean isValidPosition(int x_pos, int y_pos) {
		return (x_pos >= MIN_X_VALUE && x_pos <= MAX_X_VALUE
				 && y_pos >= MIN_Y_VALUE && y_pos <= MAX_Y_VALUE);
	}
	
	/**
	 * 	Checks whether the given dimensions are valid dimensions for 
	 *  any Mazub.
	 * 
	 * @param dimension
	 * 			the dimension of Mazub
	 * @return 	True if both dimensions are positive
	 *			| return (dimension[0] > 0) && (dimension[1] > 0)
	 */
	public static boolean isValidDimension(int[] dimension) {
		return (dimension[0] > 0) && (dimension[1] > 0);
	}	
	
	/**
	 * Method to make the Mazub start moving
	 * 
	 * @param x_pos 
	 * 			the horizontal position of Mazub
	 * @param y_pos
	 * 			the vertical position of Mazub
	 * @pre the position of Mazub must be valid
	 * 			| isValidPosition(getXPos(),getYPos())
	 * @post Mazub moved with a certain speed and acceleration
	 * 
	 * NOMINAAL uitwerken
	 * 
	 * KLAAR PIEMELS
	 */
	public void startMove() {
		assert isValidPosition(getXPos(),getYPos());
		speed = START_SPEED; 
		if (this.isDucked() == false) {
			acc = (float) 0.9;
			maxSpeed = getMaxSpeed();
		}
		else {
			acc = 0;
			maxSpeed = MAX_SPEED_DUCK;
		}
		
	}
	
	/**
	 * Method to end the move of a Mazub
	 * 
	 * @param x_pos 
	 * 			the horizontal position of Mazub
	 * @param y_pos
	 * 			the vertical position of Mazub
	 * @pre the position of Mazub must be valid
	 * 			| isValidPosition(getXPos(),getYPos())
	 * @post Mazub does not move
	 * 
	 * 
	 * NOMINAAL uitwerken
	 * 
	 * KLAAR
	 */
	public void endMove(int x_pos, int y_pos) {
		speed = 0;
		acc = 0;
	}
	
	/**
	 * 
	 * 
	 * 
	 * DEFENSIEF uitwerken
	 */
	public void advanceTime() {
		newSpeed = speed + acc*deltaT;
		if (newSpeed < maxSpeed) {
			speed = (float) newSpeed;
		}
		else {			
			acc = 0;
			speed = maxSpeed;
			}
		new_x_pos = (double) this.getXPos() + speed*100*deltaT + x_difference;
		
		YSpeed = YSpeed + YAcc*deltaT;
		if (y_pos == 0) {
			endFall();
		}
		else {
			new_y_pos = (double) this.getYPos() + YSpeed*100*deltaT + y_difference;
		}
				
		x_pos = (int) Math.floor(new_x_pos);
		y_pos = (int) Math.floor(new_y_pos);
		x_difference = new_x_pos - x_pos;
		y_difference = new_y_pos - y_pos;
	}
	
	/**
	 *  
	 * DEFENSIEF uitwerken
	 */
	public void startJump() {
		YSpeed = JUMP_SPEED;
	}
	
	/**
	 * DEFENSIEF uitwerken
	 */
	public void endJump() {
		if (YSpeed > 0) {
			YSpeed = 0;
		}
		if (y_pos != 0) {
			fall();
		}
	}
	
	/**
	 * TOTAAL uitwerken
	 */
	public void fall() {
		if (y_pos >0) {
			YAcc = FALL_ACC;
		}
	}
	
	/**DEZE samenvoegen met de vorige?
	 * 
	 * TOTAAL uitwerekn
	 */
	public void endFall() {
		if (y_pos == 0) {
			YAcc = 0;
		}
	}
	
	public boolean isDucked(){
		return (duck);
	}
	
	/**
	 * DEFENSIEF uitwerken
	 */
	
	public void startDuck() {
		duck = true ;
	}
		
	
	/**
	 * DEFENSIEF uitwerken
	 */
	public void endDuck() {	
		duck = false;
	}
	
	/**
	 * NOMINAAL uitwerken
	 * GEEN formele documentatie nodig
	 */
	public void getCurrentSprite() {
		if ( ! isDucked()) {
			x_dim = x_dim_not_ducked;
			y_dim = y_dim_not_ducked;			
		}
		else {
			x_dim = x_dim_ducked;
			y_dim = y_dim_ducked;
		}
	}

	public void setInitStartSpeed(int initStartSpeed) {
		this.initStartSpeed = initStartSpeed;
	}
}
