package jumpingalien.part1.facade;


import jumpingalien.model.IllegalDimensionException;
import jumpingalien.model.IllegalPositionException;
import jumpingalien.util.ModelException;
import jumpingalien.model.Mazub;
import jumpingalien.util.Sprite;


public class Facade implements IFacade {
	
	public Mazub createMazub(int pixelLeftX, int pixelBottomY, Sprite[] sprites) 
			throws ModelException {
		if ( ! isValidPosition(pixelLeftX,pixelBottomY)) // || (! isValidSprite(sprites)) )
			throw new ModelException(null);
		new Mazub(pixelLeftX,pixelBottomY,sprites);
	}
	
	public static boolean isValidPosition(int x_pos, int y_pos) {
		return (x_pos >= MIN_X_VALUE && x_pos <= MAX_X_VALUE
				 && y_pos >= MIN_Y_VALUE && y_pos <= MAX_Y_VALUE);
	}
	/**
	 * the minimal value for x_pos
	 */
	public static int MIN_X_VALUE = 0;
	/**
	 * the maximal value for x_pos
	 */
	public static int MAX_X_VALUE = 1023;
	/**
	 * the minimal value for y_pos
	 */
	public static int MIN_Y_VALUE = 0;
	/**
	 * the maximal value for y_pos
	 */
	public static int MAX_Y_VALUE = 767;
	

	
	public int[] getLocation(Mazub alien) {
		return alien.getLocation();
	}

	 
	public double[] getVelocity(Mazub alien) {
		return alien.getVelocity();
	}

	 
	public double[] getAcceleration(Mazub alien) {
		return alien.getAcceleration();
	}

	 
	public int[] getSize(Mazub alien) {
		return alien.getSize();
	}

	 
	public Sprite getCurrentSprite(Mazub alien) {
		return alien.getCurrentSprite();
	}

	 
	public void startJump(Mazub alien) {
		alien.startJump();
		
	}

	 
	public void endJump(Mazub alien) {
		alien.endJump();
	}

	 
	public void startMoveLeft(Mazub alien) {
		alien.startMoveLeft();
	}

	 
	public void endMoveLeft(Mazub alien) {
		alien.endMove();
	}

	 
	public void startMoveRight(Mazub alien) {
		alien.startMoveRight();
	}

	 
	public void endMoveRight(Mazub alien) {
		alien.endMove();		
	}

	 
	public void startDuck(Mazub alien) {
		alien.startDuck();
	}

	 
	public void endDuck(Mazub alien) {
		alien.endDuck();
	}

	 
	public void advanceTime(Mazub alien, double dt) {
		alien.advanceTime(dt);
	}

}
